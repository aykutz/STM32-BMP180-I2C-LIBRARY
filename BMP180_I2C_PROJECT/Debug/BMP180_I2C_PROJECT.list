
BMP180_I2C_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009764  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800990c  0800990c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009914  08009914  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009914  08009914  00019914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009918  08009918  00019918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800991c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000990  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a0c  20000a0c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000163ae  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038d1  00000000  00000000  0003649d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001158  00000000  00000000  00039d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000fd8  00000000  00000000  0003aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002359a  00000000  00000000  0003bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001858b  00000000  00000000  0005f43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb18f  00000000  00000000  000779c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004bb8  00000000  00000000  00142b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080098d4 	.word	0x080098d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080098d4 	.word	0x080098d4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b970 	b.w	8000b2c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9e08      	ldr	r6, [sp, #32]
 800086a:	460d      	mov	r5, r1
 800086c:	4604      	mov	r4, r0
 800086e:	460f      	mov	r7, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4694      	mov	ip, r2
 8000878:	d965      	bls.n	8000946 <__udivmoddi4+0xe2>
 800087a:	fab2 f382 	clz	r3, r2
 800087e:	b143      	cbz	r3, 8000892 <__udivmoddi4+0x2e>
 8000880:	fa02 fc03 	lsl.w	ip, r2, r3
 8000884:	f1c3 0220 	rsb	r2, r3, #32
 8000888:	409f      	lsls	r7, r3
 800088a:	fa20 f202 	lsr.w	r2, r0, r2
 800088e:	4317      	orrs	r7, r2
 8000890:	409c      	lsls	r4, r3
 8000892:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000896:	fa1f f58c 	uxth.w	r5, ip
 800089a:	fbb7 f1fe 	udiv	r1, r7, lr
 800089e:	0c22      	lsrs	r2, r4, #16
 80008a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008a8:	fb01 f005 	mul.w	r0, r1, r5
 80008ac:	4290      	cmp	r0, r2
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b0:	eb1c 0202 	adds.w	r2, ip, r2
 80008b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008b8:	f080 811c 	bcs.w	8000af4 <__udivmoddi4+0x290>
 80008bc:	4290      	cmp	r0, r2
 80008be:	f240 8119 	bls.w	8000af4 <__udivmoddi4+0x290>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4462      	add	r2, ip
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	b2a4      	uxth	r4, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008d6:	fb00 f505 	mul.w	r5, r0, r5
 80008da:	42a5      	cmp	r5, r4
 80008dc:	d90a      	bls.n	80008f4 <__udivmoddi4+0x90>
 80008de:	eb1c 0404 	adds.w	r4, ip, r4
 80008e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e6:	f080 8107 	bcs.w	8000af8 <__udivmoddi4+0x294>
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	f240 8104 	bls.w	8000af8 <__udivmoddi4+0x294>
 80008f0:	4464      	add	r4, ip
 80008f2:	3802      	subs	r0, #2
 80008f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11e      	cbz	r6, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40dc      	lsrs	r4, r3
 8000900:	2300      	movs	r3, #0
 8000902:	e9c6 4300 	strd	r4, r3, [r6]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0xbc>
 800090e:	2e00      	cmp	r6, #0
 8000910:	f000 80ed 	beq.w	8000aee <__udivmoddi4+0x28a>
 8000914:	2100      	movs	r1, #0
 8000916:	e9c6 0500 	strd	r0, r5, [r6]
 800091a:	4608      	mov	r0, r1
 800091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000920:	fab3 f183 	clz	r1, r3
 8000924:	2900      	cmp	r1, #0
 8000926:	d149      	bne.n	80009bc <__udivmoddi4+0x158>
 8000928:	42ab      	cmp	r3, r5
 800092a:	d302      	bcc.n	8000932 <__udivmoddi4+0xce>
 800092c:	4282      	cmp	r2, r0
 800092e:	f200 80f8 	bhi.w	8000b22 <__udivmoddi4+0x2be>
 8000932:	1a84      	subs	r4, r0, r2
 8000934:	eb65 0203 	sbc.w	r2, r5, r3
 8000938:	2001      	movs	r0, #1
 800093a:	4617      	mov	r7, r2
 800093c:	2e00      	cmp	r6, #0
 800093e:	d0e2      	beq.n	8000906 <__udivmoddi4+0xa2>
 8000940:	e9c6 4700 	strd	r4, r7, [r6]
 8000944:	e7df      	b.n	8000906 <__udivmoddi4+0xa2>
 8000946:	b902      	cbnz	r2, 800094a <__udivmoddi4+0xe6>
 8000948:	deff      	udf	#255	; 0xff
 800094a:	fab2 f382 	clz	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 8090 	bne.w	8000a74 <__udivmoddi4+0x210>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095a:	fa1f fe8c 	uxth.w	lr, ip
 800095e:	2101      	movs	r1, #1
 8000960:	fbb2 f5f7 	udiv	r5, r2, r7
 8000964:	fb07 2015 	mls	r0, r7, r5, r2
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800096e:	fb0e f005 	mul.w	r0, lr, r5
 8000972:	4290      	cmp	r0, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x124>
 8000976:	eb1c 0202 	adds.w	r2, ip, r2
 800097a:	f105 38ff 	add.w	r8, r5, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x122>
 8000980:	4290      	cmp	r0, r2
 8000982:	f200 80cb 	bhi.w	8000b1c <__udivmoddi4+0x2b8>
 8000986:	4645      	mov	r5, r8
 8000988:	1a12      	subs	r2, r2, r0
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000990:	fb07 2210 	mls	r2, r7, r0, r2
 8000994:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000998:	fb0e fe00 	mul.w	lr, lr, r0
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x14e>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a8:	d202      	bcs.n	80009b0 <__udivmoddi4+0x14c>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	f200 80bb 	bhi.w	8000b26 <__udivmoddi4+0x2c2>
 80009b0:	4610      	mov	r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ba:	e79f      	b.n	80008fc <__udivmoddi4+0x98>
 80009bc:	f1c1 0720 	rsb	r7, r1, #32
 80009c0:	408b      	lsls	r3, r1
 80009c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ca:	fa05 f401 	lsl.w	r4, r5, r1
 80009ce:	fa20 f307 	lsr.w	r3, r0, r7
 80009d2:	40fd      	lsrs	r5, r7
 80009d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d8:	4323      	orrs	r3, r4
 80009da:	fbb5 f8f9 	udiv	r8, r5, r9
 80009de:	fa1f fe8c 	uxth.w	lr, ip
 80009e2:	fb09 5518 	mls	r5, r9, r8, r5
 80009e6:	0c1c      	lsrs	r4, r3, #16
 80009e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ec:	fb08 f50e 	mul.w	r5, r8, lr
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	fa00 f001 	lsl.w	r0, r0, r1
 80009fa:	d90b      	bls.n	8000a14 <__udivmoddi4+0x1b0>
 80009fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000a00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a04:	f080 8088 	bcs.w	8000b18 <__udivmoddi4+0x2b4>
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	f240 8085 	bls.w	8000b18 <__udivmoddi4+0x2b4>
 8000a0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a12:	4464      	add	r4, ip
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	b29d      	uxth	r5, r3
 8000a18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a28:	45a6      	cmp	lr, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x1da>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a34:	d26c      	bcs.n	8000b10 <__udivmoddi4+0x2ac>
 8000a36:	45a6      	cmp	lr, r4
 8000a38:	d96a      	bls.n	8000b10 <__udivmoddi4+0x2ac>
 8000a3a:	3b02      	subs	r3, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a42:	fba3 9502 	umull	r9, r5, r3, r2
 8000a46:	eba4 040e 	sub.w	r4, r4, lr
 8000a4a:	42ac      	cmp	r4, r5
 8000a4c:	46c8      	mov	r8, r9
 8000a4e:	46ae      	mov	lr, r5
 8000a50:	d356      	bcc.n	8000b00 <__udivmoddi4+0x29c>
 8000a52:	d053      	beq.n	8000afc <__udivmoddi4+0x298>
 8000a54:	b156      	cbz	r6, 8000a6c <__udivmoddi4+0x208>
 8000a56:	ebb0 0208 	subs.w	r2, r0, r8
 8000a5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a62:	40ca      	lsrs	r2, r1
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	4317      	orrs	r7, r2
 8000a68:	e9c6 7400 	strd	r7, r4, [r6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	f1c3 0120 	rsb	r1, r3, #32
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a80:	fa25 f101 	lsr.w	r1, r5, r1
 8000a84:	409d      	lsls	r5, r3
 8000a86:	432a      	orrs	r2, r5
 8000a88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8c:	fa1f fe8c 	uxth.w	lr, ip
 8000a90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a94:	fb07 1510 	mls	r5, r7, r0, r1
 8000a98:	0c11      	lsrs	r1, r2, #16
 8000a9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x258>
 8000aaa:	eb1c 0101 	adds.w	r1, ip, r1
 8000aae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ab2:	d22f      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab4:	428d      	cmp	r5, r1
 8000ab6:	d92d      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	1b49      	subs	r1, r1, r5
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ac4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ac8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000acc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d908      	bls.n	8000ae6 <__udivmoddi4+0x282>
 8000ad4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000adc:	d216      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000ade:	4291      	cmp	r1, r2
 8000ae0:	d914      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000ae2:	3d02      	subs	r5, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a52      	subs	r2, r2, r1
 8000ae8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aec:	e738      	b.n	8000960 <__udivmoddi4+0xfc>
 8000aee:	4631      	mov	r1, r6
 8000af0:	4630      	mov	r0, r6
 8000af2:	e708      	b.n	8000906 <__udivmoddi4+0xa2>
 8000af4:	4639      	mov	r1, r7
 8000af6:	e6e6      	b.n	80008c6 <__udivmoddi4+0x62>
 8000af8:	4610      	mov	r0, r2
 8000afa:	e6fb      	b.n	80008f4 <__udivmoddi4+0x90>
 8000afc:	4548      	cmp	r0, r9
 8000afe:	d2a9      	bcs.n	8000a54 <__udivmoddi4+0x1f0>
 8000b00:	ebb9 0802 	subs.w	r8, r9, r2
 8000b04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	e7a3      	b.n	8000a54 <__udivmoddi4+0x1f0>
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	e7ea      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b10:	462b      	mov	r3, r5
 8000b12:	e794      	b.n	8000a3e <__udivmoddi4+0x1da>
 8000b14:	4640      	mov	r0, r8
 8000b16:	e7d1      	b.n	8000abc <__udivmoddi4+0x258>
 8000b18:	46d0      	mov	r8, sl
 8000b1a:	e77b      	b.n	8000a14 <__udivmoddi4+0x1b0>
 8000b1c:	3d02      	subs	r5, #2
 8000b1e:	4462      	add	r2, ip
 8000b20:	e732      	b.n	8000988 <__udivmoddi4+0x124>
 8000b22:	4608      	mov	r0, r1
 8000b24:	e70a      	b.n	800093c <__udivmoddi4+0xd8>
 8000b26:	4464      	add	r4, ip
 8000b28:	3802      	subs	r0, #2
 8000b2a:	e742      	b.n	80009b2 <__udivmoddi4+0x14e>

08000b2c <__aeabi_idiv0>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <BMP180_Init>:
uint32_t unCompPresure;
float presure, presureATM;
int32_t pB6,pX1,pX2,pB3,pB4,pB7,pX3;
/*---------------------------------------------------------------------------------------------------------------*/
void BMP180_Init()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	// IF CONNECTION IS OK, GREEN LED TURN ON. THIS MEANS NO PROBLEM, EVERYTHINK IS OK.
	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 100000)==HAL_OK)
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <BMP180_Init+0x2c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	21ee      	movs	r1, #238	; 0xee
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <BMP180_Init+0x30>)
 8000b3c:	f003 fb2a 	bl	8004194 <HAL_I2C_IsDeviceReady>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <BMP180_Init+0x22>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <BMP180_Init+0x34>)
 8000b4e:	f001 fa99 	bl	8002084 <HAL_GPIO_WritePin>

	BMP180_Get_Calibration_Values();
 8000b52:	f000 f809 	bl	8000b68 <BMP180_Get_Calibration_Values>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	000186a0 	.word	0x000186a0
 8000b60:	200000e8 	.word	0x200000e8
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <BMP180_Get_Calibration_Values>:
void BMP180_Get_Calibration_Values()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af04      	add	r7, sp, #16
	uint8_t calibrationBuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_CALIBRATION_START_ADDRESS, 1, calibrationBuff, BMP180_CALIBRATION_VALUE_LENGTH,10000 );
 8000b80:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	2316      	movs	r3, #22
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	22aa      	movs	r2, #170	; 0xaa
 8000b92:	21ef      	movs	r1, #239	; 0xef
 8000b94:	4876      	ldr	r0, [pc, #472]	; (8000d70 <BMP180_Get_Calibration_Values+0x208>)
 8000b96:	f003 f8d7 	bl	8003d48 <HAL_I2C_Mem_Read>

	/*shifting operations*/
	AC1 = calibrationBuff[0]<<8 | calibrationBuff[1]; //8 bit MSB shifting left(15,14,13..), 8 bit LSB stay(7,6,5,..0)
 8000b9a:	783b      	ldrb	r3, [r7, #0]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	4b72      	ldr	r3, [pc, #456]	; (8000d74 <BMP180_Get_Calibration_Values+0x20c>)
 8000baa:	801a      	strh	r2, [r3, #0]
	AC2 = calibrationBuff[2]<<8 | calibrationBuff[3];
 8000bac:	78bb      	ldrb	r3, [r7, #2]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <BMP180_Get_Calibration_Values+0x210>)
 8000bbc:	801a      	strh	r2, [r3, #0]
	AC3 = calibrationBuff[4]<<8 | calibrationBuff[5];
 8000bbe:	793b      	ldrb	r3, [r7, #4]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	797b      	ldrb	r3, [r7, #5]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	4b6b      	ldr	r3, [pc, #428]	; (8000d7c <BMP180_Get_Calibration_Values+0x214>)
 8000bce:	801a      	strh	r2, [r3, #0]
	AC4 = calibrationBuff[6]<<8 | calibrationBuff[7];
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <BMP180_Get_Calibration_Values+0x218>)
 8000be0:	801a      	strh	r2, [r3, #0]
	AC5 = calibrationBuff[8]<<8 | calibrationBuff[9];
 8000be2:	7a3b      	ldrb	r3, [r7, #8]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	7a7b      	ldrb	r3, [r7, #9]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	4b64      	ldr	r3, [pc, #400]	; (8000d84 <BMP180_Get_Calibration_Values+0x21c>)
 8000bf2:	801a      	strh	r2, [r3, #0]
	AC6 =calibrationBuff[10]<<8 | calibrationBuff[11];
 8000bf4:	7abb      	ldrb	r3, [r7, #10]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	7afb      	ldrb	r3, [r7, #11]
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <BMP180_Get_Calibration_Values+0x220>)
 8000c04:	801a      	strh	r2, [r3, #0]
	B1 = calibrationBuff[12]<<8 | calibrationBuff[13];
 8000c06:	7b3b      	ldrb	r3, [r7, #12]
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <BMP180_Get_Calibration_Values+0x224>)
 8000c16:	801a      	strh	r2, [r3, #0]
	B2 = calibrationBuff[14]<<8 | calibrationBuff[15];
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <BMP180_Get_Calibration_Values+0x228>)
 8000c28:	801a      	strh	r2, [r3, #0]
	MB = calibrationBuff[16]<<8 | calibrationBuff[17];
 8000c2a:	7c3b      	ldrb	r3, [r7, #16]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	7c7b      	ldrb	r3, [r7, #17]
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	4b56      	ldr	r3, [pc, #344]	; (8000d94 <BMP180_Get_Calibration_Values+0x22c>)
 8000c3a:	801a      	strh	r2, [r3, #0]
	MC = calibrationBuff[18]<<8 | calibrationBuff[19];
 8000c3c:	7cbb      	ldrb	r3, [r7, #18]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	7cfb      	ldrb	r3, [r7, #19]
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <BMP180_Get_Calibration_Values+0x230>)
 8000c4c:	801a      	strh	r2, [r3, #0]
	MD = calibrationBuff[20]<<8 | calibrationBuff[21];
 8000c4e:	7d3b      	ldrb	r3, [r7, #20]
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	7d7b      	ldrb	r3, [r7, #21]
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <BMP180_Get_Calibration_Values+0x234>)
 8000c5e:	801a      	strh	r2, [r3, #0]

	/*CONTROL CALIBRATION VALUEs COMING FROM to EEPROM, IF THERE IS A PROBLEM, ORANGE LED WILL TURN ON*/
	/*IF ORANGE LED DOESN'T WORK, EVERYTHINK IS OK*/

	if(AC1 == 0x0000 || AC1 == 0xFFFF)
 8000c60:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <BMP180_Get_Calibration_Values+0x20c>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <BMP180_Get_Calibration_Values+0x110>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c70:	484b      	ldr	r0, [pc, #300]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000c72:	f001 fa07 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000c76:	e7fe      	b.n	8000c76 <BMP180_Get_Calibration_Values+0x10e>
	}

	if(AC2 == 0x0000 || AC2 == 0xFFFF)
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <BMP180_Get_Calibration_Values+0x210>)
 8000c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d106      	bne.n	8000c90 <BMP180_Get_Calibration_Values+0x128>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4845      	ldr	r0, [pc, #276]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000c8a:	f001 f9fb 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000c8e:	e7fe      	b.n	8000c8e <BMP180_Get_Calibration_Values+0x126>
	}
	if(AC3 == 0x0000 || AC3 == 0xFFFF)
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <BMP180_Get_Calibration_Values+0x214>)
 8000c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d106      	bne.n	8000ca8 <BMP180_Get_Calibration_Values+0x140>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca0:	483f      	ldr	r0, [pc, #252]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000ca2:	f001 f9ef 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000ca6:	e7fe      	b.n	8000ca6 <BMP180_Get_Calibration_Values+0x13e>
	}
	if(AC4 == 0x0000 || AC4 == 0xFFFF)
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <BMP180_Get_Calibration_Values+0x218>)
 8000caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d106      	bne.n	8000cc0 <BMP180_Get_Calibration_Values+0x158>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4839      	ldr	r0, [pc, #228]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000cba:	f001 f9e3 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000cbe:	e7fe      	b.n	8000cbe <BMP180_Get_Calibration_Values+0x156>
	}
	if(AC5 == 0x0000 || AC5 == 0xFFFF)
 8000cc0:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <BMP180_Get_Calibration_Values+0x21c>)
 8000cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d106      	bne.n	8000cd8 <BMP180_Get_Calibration_Values+0x170>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4833      	ldr	r0, [pc, #204]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000cd2:	f001 f9d7 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000cd6:	e7fe      	b.n	8000cd6 <BMP180_Get_Calibration_Values+0x16e>
	}
	if(AC6 == 0x0000 || AC6 == 0xFFFF)
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <BMP180_Get_Calibration_Values+0x220>)
 8000cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d106      	bne.n	8000cf0 <BMP180_Get_Calibration_Values+0x188>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce8:	482d      	ldr	r0, [pc, #180]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000cea:	f001 f9cb 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000cee:	e7fe      	b.n	8000cee <BMP180_Get_Calibration_Values+0x186>
	}
	if(B1 == 0x0000 || B1 == 0xFFFF)
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <BMP180_Get_Calibration_Values+0x224>)
 8000cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d106      	bne.n	8000d08 <BMP180_Get_Calibration_Values+0x1a0>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d00:	4827      	ldr	r0, [pc, #156]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000d02:	f001 f9bf 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000d06:	e7fe      	b.n	8000d06 <BMP180_Get_Calibration_Values+0x19e>
	}
	if(B2 == 0x0000 || B2 == 0xFFFF)
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <BMP180_Get_Calibration_Values+0x228>)
 8000d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d106      	bne.n	8000d20 <BMP180_Get_Calibration_Values+0x1b8>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000d12:	2201      	movs	r2, #1
 8000d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d18:	4821      	ldr	r0, [pc, #132]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000d1a:	f001 f9b3 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000d1e:	e7fe      	b.n	8000d1e <BMP180_Get_Calibration_Values+0x1b6>
	}
	if(MB == 0x0000 || MB == 0xFFFF)
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <BMP180_Get_Calibration_Values+0x22c>)
 8000d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <BMP180_Get_Calibration_Values+0x1d0>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d30:	481b      	ldr	r0, [pc, #108]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000d32:	f001 f9a7 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000d36:	e7fe      	b.n	8000d36 <BMP180_Get_Calibration_Values+0x1ce>
	}
	if(MC == 0x0000 || MC == 0xFFFF)
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <BMP180_Get_Calibration_Values+0x230>)
 8000d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d106      	bne.n	8000d50 <BMP180_Get_Calibration_Values+0x1e8>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	4815      	ldr	r0, [pc, #84]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000d4a:	f001 f99b 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000d4e:	e7fe      	b.n	8000d4e <BMP180_Get_Calibration_Values+0x1e6>
	}
	if(MD == 0x0000 || MD == 0xFFFF)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <BMP180_Get_Calibration_Values+0x234>)
 8000d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d106      	bne.n	8000d68 <BMP180_Get_Calibration_Values+0x200>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	480f      	ldr	r0, [pc, #60]	; (8000da0 <BMP180_Get_Calibration_Values+0x238>)
 8000d62:	f001 f98f 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000d66:	e7fe      	b.n	8000d66 <BMP180_Get_Calibration_Values+0x1fe>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000e8 	.word	0x200000e8
 8000d74:	20000098 	.word	0x20000098
 8000d78:	2000009a 	.word	0x2000009a
 8000d7c:	2000009c 	.word	0x2000009c
 8000d80:	2000009e 	.word	0x2000009e
 8000d84:	200000a0 	.word	0x200000a0
 8000d88:	200000a2 	.word	0x200000a2
 8000d8c:	200000a4 	.word	0x200000a4
 8000d90:	200000a6 	.word	0x200000a6
 8000d94:	200000a8 	.word	0x200000a8
 8000d98:	200000aa 	.word	0x200000aa
 8000d9c:	200000ac 	.word	0x200000ac
 8000da0:	40020c00 	.word	0x40020c00

08000da4 <BMP180_Get_Uncompansated_Temperature>:
void BMP180_Get_Uncompansated_Temperature(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af04      	add	r7, sp, #16
	uint8_t wData[1];
	uint8_t rData[2]={0};
 8000daa:	2300      	movs	r3, #0
 8000dac:	803b      	strh	r3, [r7, #0]
	wData[0]=0x2E;
 8000dae:	232e      	movs	r3, #46	; 0x2e
 8000db0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100000);
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <BMP180_Get_Uncompansated_Temperature+0x60>)
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	2301      	movs	r3, #1
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	22f4      	movs	r2, #244	; 0xf4
 8000dc2:	21ee      	movs	r1, #238	; 0xee
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <BMP180_Get_Uncompansated_Temperature+0x64>)
 8000dc6:	f002 fec5 	bl	8003b54 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000dca:	2005      	movs	r0, #5
 8000dcc:	f000 fe88 	bl	8001ae0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 2, 100000);
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <BMP180_Get_Uncompansated_Temperature+0x60>)
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	463b      	mov	r3, r7
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	22f6      	movs	r2, #246	; 0xf6
 8000de0:	21ef      	movs	r1, #239	; 0xef
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <BMP180_Get_Uncompansated_Temperature+0x64>)
 8000de4:	f002 ffb0 	bl	8003d48 <HAL_I2C_Mem_Read>
	unCompTemp = (int16_t)((rData[0]<<8) | rData[1]); //8 bit MSB shifting left(15,14,13..), 8 bit LSB stay(7,6,5,..0)
 8000de8:	783b      	ldrb	r3, [r7, #0]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	787b      	ldrb	r3, [r7, #1]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <BMP180_Get_Uncompansated_Temperature+0x68>)
 8000df8:	801a      	strh	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	000186a0 	.word	0x000186a0
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	200000ae 	.word	0x200000ae

08000e10 <BMP180_Get_Temperature>:
void BMP180_Get_Temperature()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	BMP180_Get_Uncompansated_Temperature();
 8000e14:	f7ff ffc6 	bl	8000da4 <BMP180_Get_Uncompansated_Temperature>

	//DATASHEET CALCULATING

	tX1 = ((int32_t)unCompTemp - (int32_t)AC6) * (int32_t)AC5 / 32768;
 8000e18:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <BMP180_Get_Temperature+0xc0>)
 8000e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <BMP180_Get_Temperature+0xc4>)
 8000e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <BMP180_Get_Temperature+0xc8>)
 8000e2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da02      	bge.n	8000e3c <BMP180_Get_Temperature+0x2c>
 8000e36:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000e3a:	337f      	adds	r3, #127	; 0x7f
 8000e3c:	13db      	asrs	r3, r3, #15
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <BMP180_Get_Temperature+0xcc>)
 8000e42:	601a      	str	r2, [r3, #0]
	tX2 = ((int32_t)MC * 2048) / (tX1 + (int32_t)MD);
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <BMP180_Get_Temperature+0xd0>)
 8000e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4a:	02da      	lsls	r2, r3, #11
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <BMP180_Get_Temperature+0xd4>)
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	4619      	mov	r1, r3
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <BMP180_Get_Temperature+0xcc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	440b      	add	r3, r1
 8000e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <BMP180_Get_Temperature+0xd8>)
 8000e60:	6013      	str	r3, [r2, #0]

	if(tX1==0 && MD==0) // CONTROL tx1 and md FOR 0
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <BMP180_Get_Temperature+0xcc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10b      	bne.n	8000e82 <BMP180_Get_Temperature+0x72>
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <BMP180_Get_Temperature+0xd4>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d106      	bne.n	8000e82 <BMP180_Get_Temperature+0x72>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1); //ERROR
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7a:	481c      	ldr	r0, [pc, #112]	; (8000eec <BMP180_Get_Temperature+0xdc>)
 8000e7c:	f001 f902 	bl	8002084 <HAL_GPIO_WritePin>
		while(1);
 8000e80:	e7fe      	b.n	8000e80 <BMP180_Get_Temperature+0x70>
	}


	tB5 = tX1 + tX2;
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <BMP180_Get_Temperature+0xcc>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <BMP180_Get_Temperature+0xd8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <BMP180_Get_Temperature+0xe0>)
 8000e8e:	6013      	str	r3, [r2, #0]
	temp = (tB5 + 8) / 16 * 0.1;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <BMP180_Get_Temperature+0xe0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3308      	adds	r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da00      	bge.n	8000e9c <BMP180_Get_Temperature+0x8c>
 8000e9a:	330f      	adds	r3, #15
 8000e9c:	111b      	asrs	r3, r3, #4
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fc0e 	bl	80006c0 <__aeabi_i2d>
 8000ea4:	a308      	add	r3, pc, #32	; (adr r3, 8000ec8 <BMP180_Get_Temperature+0xb8>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff f98d 	bl	80001c8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fc6d 	bl	8000794 <__aeabi_d2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <BMP180_Get_Temperature+0xe4>)
 8000ebe:	6013      	str	r3, [r2, #0]

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	9999999a 	.word	0x9999999a
 8000ecc:	3fb99999 	.word	0x3fb99999
 8000ed0:	200000ae 	.word	0x200000ae
 8000ed4:	200000a2 	.word	0x200000a2
 8000ed8:	200000a0 	.word	0x200000a0
 8000edc:	200000b4 	.word	0x200000b4
 8000ee0:	200000aa 	.word	0x200000aa
 8000ee4:	200000ac 	.word	0x200000ac
 8000ee8:	200000b8 	.word	0x200000b8
 8000eec:	40020c00 	.word	0x40020c00
 8000ef0:	200000bc 	.word	0x200000bc
 8000ef4:	200000b0 	.word	0x200000b0

08000ef8 <BMP180_Get_Uncompansated_Presure>:
void BMP180_Get_Uncompansated_Presure(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af04      	add	r7, sp, #16
	uint8_t rData[3]={0};
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <BMP180_Get_Uncompansated_Presure+0x68>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	80bb      	strh	r3, [r7, #4]
 8000f04:	2300      	movs	r3, #0
 8000f06:	71bb      	strb	r3, [r7, #6]

	uint8_t wData[1];
	wData[0]=0x34 | (0x03<<6); //oversampling_setting is ultra high resolution, it's mean 0x03 and shifting 6 bit to left
 8000f08:	23f4      	movs	r3, #244	; 0xf4
 8000f0a:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100000);
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <BMP180_Get_Uncompansated_Presure+0x6c>)
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	463b      	mov	r3, r7
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	22f4      	movs	r2, #244	; 0xf4
 8000f1c:	21ee      	movs	r1, #238	; 0xee
 8000f1e:	4812      	ldr	r0, [pc, #72]	; (8000f68 <BMP180_Get_Uncompansated_Presure+0x70>)
 8000f20:	f002 fe18 	bl	8003b54 <HAL_I2C_Mem_Write>
	HAL_Delay(26); // 26 ms delay because we selected ultra high resolution(oversampling_settings)
 8000f24:	201a      	movs	r0, #26
 8000f26:	f000 fddb 	bl	8001ae0 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 3, 100000);
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <BMP180_Get_Uncompansated_Presure+0x6c>)
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2303      	movs	r3, #3
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	22f6      	movs	r2, #246	; 0xf6
 8000f3a:	21ef      	movs	r1, #239	; 0xef
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <BMP180_Get_Uncompansated_Presure+0x70>)
 8000f3e:	f002 ff03 	bl	8003d48 <HAL_I2C_Mem_Read>
	unCompPresure = (rData[0]<<16 | rData [1]<<8 | rData[2]) >> (8 - (uint8_t)(0x03));
 8000f42:	793b      	ldrb	r3, [r7, #4]
 8000f44:	041a      	lsls	r2, r3, #16
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	115b      	asrs	r3, r3, #5
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <BMP180_Get_Uncompansated_Presure+0x74>)
 8000f56:	601a      	str	r2, [r3, #0]
	// shifting operation -> unCompPresure = (MSB<<16 + LSB<<8 + XLSB) >> (8-oversample_settings)
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	080098ec 	.word	0x080098ec
 8000f64:	000186a0 	.word	0x000186a0
 8000f68:	200000e8 	.word	0x200000e8
 8000f6c:	200000c0 	.word	0x200000c0

08000f70 <BMP180_Get_Presure>:
void BMP180_Get_Presure()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	BMP180_Get_Uncompansated_Presure();
 8000f74:	f7ff ffc0 	bl	8000ef8 <BMP180_Get_Uncompansated_Presure>

	// DATASHEET CALCULATING

	pB6 = tB5 - 4000;
 8000f78:	4b8f      	ldr	r3, [pc, #572]	; (80011b8 <BMP180_Get_Presure+0x248>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000f80:	4a8e      	ldr	r2, [pc, #568]	; (80011bc <BMP180_Get_Presure+0x24c>)
 8000f82:	6013      	str	r3, [r2, #0]
	pX1 = (B2 * (pB6 * pB6 / 4096)) / 2048;
 8000f84:	4b8e      	ldr	r3, [pc, #568]	; (80011c0 <BMP180_Get_Presure+0x250>)
 8000f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4b8b      	ldr	r3, [pc, #556]	; (80011bc <BMP180_Get_Presure+0x24c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a8a      	ldr	r2, [pc, #552]	; (80011bc <BMP180_Get_Presure+0x24c>)
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da01      	bge.n	8000fa0 <BMP180_Get_Presure+0x30>
 8000f9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000fa0:	131b      	asrs	r3, r3, #12
 8000fa2:	fb01 f303 	mul.w	r3, r1, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da01      	bge.n	8000fae <BMP180_Get_Presure+0x3e>
 8000faa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000fae:	12db      	asrs	r3, r3, #11
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b84      	ldr	r3, [pc, #528]	; (80011c4 <BMP180_Get_Presure+0x254>)
 8000fb4:	601a      	str	r2, [r3, #0]
	pX2 = AC2 * pB6 / 2048;
 8000fb6:	4b84      	ldr	r3, [pc, #528]	; (80011c8 <BMP180_Get_Presure+0x258>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b7f      	ldr	r3, [pc, #508]	; (80011bc <BMP180_Get_Presure+0x24c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da01      	bge.n	8000fce <BMP180_Get_Presure+0x5e>
 8000fca:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000fce:	12db      	asrs	r3, r3, #11
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b7e      	ldr	r3, [pc, #504]	; (80011cc <BMP180_Get_Presure+0x25c>)
 8000fd4:	601a      	str	r2, [r3, #0]
	pX3 = pX1 + pX2;
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <BMP180_Get_Presure+0x254>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b7c      	ldr	r3, [pc, #496]	; (80011cc <BMP180_Get_Presure+0x25c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a7b      	ldr	r2, [pc, #492]	; (80011d0 <BMP180_Get_Presure+0x260>)
 8000fe2:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1 * 4 + pX3) << (uint8_t)0x03) + 2) / 4;
 8000fe4:	4b7b      	ldr	r3, [pc, #492]	; (80011d4 <BMP180_Get_Presure+0x264>)
 8000fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fea:	009a      	lsls	r2, r3, #2
 8000fec:	4b78      	ldr	r3, [pc, #480]	; (80011d0 <BMP180_Get_Presure+0x260>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da00      	bge.n	8000ffc <BMP180_Get_Presure+0x8c>
 8000ffa:	3303      	adds	r3, #3
 8000ffc:	109b      	asrs	r3, r3, #2
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b75      	ldr	r3, [pc, #468]	; (80011d8 <BMP180_Get_Presure+0x268>)
 8001002:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 / 8192;
 8001004:	4b75      	ldr	r3, [pc, #468]	; (80011dc <BMP180_Get_Presure+0x26c>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	461a      	mov	r2, r3
 800100c:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <BMP180_Get_Presure+0x24c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	da02      	bge.n	800101e <BMP180_Get_Presure+0xae>
 8001018:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800101c:	331f      	adds	r3, #31
 800101e:	135b      	asrs	r3, r3, #13
 8001020:	461a      	mov	r2, r3
 8001022:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <BMP180_Get_Presure+0x254>)
 8001024:	601a      	str	r2, [r3, #0]
	pX2 = (B1 * (pB6 * pB6 / 4096)) / 65536;
 8001026:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <BMP180_Get_Presure+0x270>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	4619      	mov	r1, r3
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <BMP180_Get_Presure+0x24c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a62      	ldr	r2, [pc, #392]	; (80011bc <BMP180_Get_Presure+0x24c>)
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	da01      	bge.n	8001042 <BMP180_Get_Presure+0xd2>
 800103e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001042:	131b      	asrs	r3, r3, #12
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	da02      	bge.n	8001052 <BMP180_Get_Presure+0xe2>
 800104c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001050:	33ff      	adds	r3, #255	; 0xff
 8001052:	141b      	asrs	r3, r3, #16
 8001054:	461a      	mov	r2, r3
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <BMP180_Get_Presure+0x25c>)
 8001058:	601a      	str	r2, [r3, #0]
	pX3 = ((pX1 + pX2) + 2) /4;
 800105a:	4b5a      	ldr	r3, [pc, #360]	; (80011c4 <BMP180_Get_Presure+0x254>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b5b      	ldr	r3, [pc, #364]	; (80011cc <BMP180_Get_Presure+0x25c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	3302      	adds	r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	da00      	bge.n	800106c <BMP180_Get_Presure+0xfc>
 800106a:	3303      	adds	r3, #3
 800106c:	109b      	asrs	r3, r3, #2
 800106e:	461a      	mov	r2, r3
 8001070:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <BMP180_Get_Presure+0x260>)
 8001072:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (unsigned long)(pX3 + 32768) / 32768;
 8001074:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <BMP180_Get_Presure+0x274>)
 8001076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107a:	461a      	mov	r2, r3
 800107c:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <BMP180_Get_Presure+0x260>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	0bdb      	lsrs	r3, r3, #15
 800108a:	461a      	mov	r2, r3
 800108c:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <BMP180_Get_Presure+0x278>)
 800108e:	601a      	str	r2, [r3, #0]
	pB7 = ((unsigned long)unCompPresure - pB3) * (50000 >> (uint8_t)0x03);
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <BMP180_Get_Presure+0x27c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a50      	ldr	r2, [pc, #320]	; (80011d8 <BMP180_Get_Presure+0x268>)
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	f641 026a 	movw	r2, #6250	; 0x186a
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <BMP180_Get_Presure+0x280>)
 80010a6:	601a      	str	r2, [r3, #0]

	if(pB7 < 0x8000000)
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <BMP180_Get_Presure+0x280>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80010b0:	da0e      	bge.n	80010d0 <BMP180_Get_Presure+0x160>
		presure = (pB7 * 2) / pB4;
 80010b2:	4b4f      	ldr	r3, [pc, #316]	; (80011f0 <BMP180_Get_Presure+0x280>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	005a      	lsls	r2, r3, #1
 80010b8:	4b4b      	ldr	r3, [pc, #300]	; (80011e8 <BMP180_Get_Presure+0x278>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <BMP180_Get_Presure+0x284>)
 80010ca:	edc3 7a00 	vstr	s15, [r3]
 80010ce:	e00d      	b.n	80010ec <BMP180_Get_Presure+0x17c>
	else
		presure = (pB7 / pB4) * 2;
 80010d0:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <BMP180_Get_Presure+0x280>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b44      	ldr	r3, [pc, #272]	; (80011e8 <BMP180_Get_Presure+0x278>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e6:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <BMP180_Get_Presure+0x284>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]

	pX1 = (presure / 256) * (presure / 256);
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <BMP180_Get_Presure+0x284>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	eddf 6a41 	vldr	s13, [pc, #260]	; 80011f8 <BMP180_Get_Presure+0x288>
 80010f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010fa:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <BMP180_Get_Presure+0x284>)
 80010fc:	edd3 6a00 	vldr	s13, [r3]
 8001100:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 80011f8 <BMP180_Get_Presure+0x288>
 8001104:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <BMP180_Get_Presure+0x254>)
 8001116:	601a      	str	r2, [r3, #0]
	pX1 = (pX1 * 3038) / 65536;
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <BMP180_Get_Presure+0x254>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	da02      	bge.n	800112e <BMP180_Get_Presure+0x1be>
 8001128:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800112c:	33ff      	adds	r3, #255	; 0xff
 800112e:	141b      	asrs	r3, r3, #16
 8001130:	461a      	mov	r2, r3
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <BMP180_Get_Presure+0x254>)
 8001134:	601a      	str	r2, [r3, #0]
	pX2 = (-7357 * presure) / 65537;
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <BMP180_Get_Presure+0x284>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80011fc <BMP180_Get_Presure+0x28c>
 8001140:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001144:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001200 <BMP180_Get_Presure+0x290>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 2a90 	vmov	r2, s15
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <BMP180_Get_Presure+0x25c>)
 8001156:	601a      	str	r2, [r3, #0]
	presure = presure + (pX1 + pX2 + 3791) / 16; //HECTOPASCAL
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <BMP180_Get_Presure+0x254>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <BMP180_Get_Presure+0x25c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4413      	add	r3, r2
 8001162:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001166:	2b00      	cmp	r3, #0
 8001168:	da00      	bge.n	800116c <BMP180_Get_Presure+0x1fc>
 800116a:	330f      	adds	r3, #15
 800116c:	111b      	asrs	r3, r3, #4
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <BMP180_Get_Presure+0x284>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <BMP180_Get_Presure+0x284>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	presureATM = presure * 0.00000986923267; //HECTOPASCAL TO ATM
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <BMP180_Get_Presure+0x284>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff faaa 	bl	80006e4 <__aeabi_f2d>
 8001190:	a307      	add	r3, pc, #28	; (adr r3, 80011b0 <BMP180_Get_Presure+0x240>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff f817 	bl	80001c8 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff faf7 	bl	8000794 <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <BMP180_Get_Presure+0x294>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	027e16e6 	.word	0x027e16e6
 80011b4:	3ee4b281 	.word	0x3ee4b281
 80011b8:	200000bc 	.word	0x200000bc
 80011bc:	200000cc 	.word	0x200000cc
 80011c0:	200000a6 	.word	0x200000a6
 80011c4:	200000d0 	.word	0x200000d0
 80011c8:	2000009a 	.word	0x2000009a
 80011cc:	200000d4 	.word	0x200000d4
 80011d0:	200000e4 	.word	0x200000e4
 80011d4:	20000098 	.word	0x20000098
 80011d8:	200000d8 	.word	0x200000d8
 80011dc:	2000009c 	.word	0x2000009c
 80011e0:	200000a4 	.word	0x200000a4
 80011e4:	2000009e 	.word	0x2000009e
 80011e8:	200000dc 	.word	0x200000dc
 80011ec:	200000c0 	.word	0x200000c0
 80011f0:	200000e0 	.word	0x200000e0
 80011f4:	200000c4 	.word	0x200000c4
 80011f8:	43800000 	.word	0x43800000
 80011fc:	c5e5e800 	.word	0xc5e5e800
 8001200:	47800080 	.word	0x47800080
 8001204:	200000c8 	.word	0x200000c8

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fbf6 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f814 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 f910 	bl	8001438 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001218:	f000 f87a 	bl	8001310 <MX_I2C1_Init>
  MX_I2S3_Init();
 800121c:	f000 f8a6 	bl	800136c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001220:	f000 f8d4 	bl	80013cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001224:	f007 ff02 	bl	800902c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Init();
 8001228:	f7ff fc82 	bl	8000b30 <BMP180_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800122c:	f007 ff24 	bl	8009078 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    BMP180_Get_Temperature();
 8001230:	f7ff fdee 	bl	8000e10 <BMP180_Get_Temperature>
    BMP180_Get_Presure();
 8001234:	f7ff fe9c 	bl	8000f70 <BMP180_Get_Presure>
    MX_USB_HOST_Process();
 8001238:	e7f8      	b.n	800122c <main+0x24>
	...

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	; 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f008 fab2 	bl	80097b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SystemClock_Config+0xcc>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <SystemClock_Config+0xcc>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <SystemClock_Config+0xcc>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <SystemClock_Config+0xd0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <SystemClock_Config+0xd0>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SystemClock_Config+0xd0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ac:	2308      	movs	r3, #8
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 f890 	bl	80053e8 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ce:	f000 f9b1 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2105      	movs	r1, #5
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 faf1 	bl	80058d8 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012fc:	f000 f99a 	bl	8001634 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	; 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2C1_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_I2C1_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2C1_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_I2C1_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_I2C1_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_I2C1_Init+0x50>)
 800134e:	f002 fabd 	bl	80038cc <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 f96c 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000e8 	.word	0x200000e8
 8001364:	40005400 	.word	0x40005400
 8001368:	00061a80 	.word	0x00061a80

0800136c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <MX_I2S3_Init+0x58>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_I2S3_Init+0x54>)
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <MX_I2S3_Init+0x5c>)
 8001396:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_I2S3_Init+0x54>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_I2S3_Init+0x54>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_I2S3_Init+0x54>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_I2S3_Init+0x54>)
 80013ac:	f003 fb7c 	bl	8004aa8 <HAL_I2S_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80013b6:	f000 f93d 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000013c 	.word	0x2000013c
 80013c4:	40003c00 	.word	0x40003c00
 80013c8:	00017700 	.word	0x00017700

080013cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_SPI1_Init+0x64>)
 80013d2:	4a18      	ldr	r2, [pc, #96]	; (8001434 <MX_SPI1_Init+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_SPI1_Init+0x64>)
 80013d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_SPI1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_SPI1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_SPI1_Init+0x64>)
 80013f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_SPI1_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_SPI1_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_SPI1_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_SPI1_Init+0x64>)
 8001418:	220a      	movs	r2, #10
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_SPI1_Init+0x64>)
 800141e:	f004 fda7 	bl	8005f70 <HAL_SPI_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001428:	f000 f904 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000184 	.word	0x20000184
 8001434:	40013000 	.word	0x40013000

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	4b72      	ldr	r3, [pc, #456]	; (800161c <MX_GPIO_Init+0x1e4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a71      	ldr	r2, [pc, #452]	; (800161c <MX_GPIO_Init+0x1e4>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b6f      	ldr	r3, [pc, #444]	; (800161c <MX_GPIO_Init+0x1e4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <MX_GPIO_Init+0x1e4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a6a      	ldr	r2, [pc, #424]	; (800161c <MX_GPIO_Init+0x1e4>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b68      	ldr	r3, [pc, #416]	; (800161c <MX_GPIO_Init+0x1e4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <MX_GPIO_Init+0x1e4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a63      	ldr	r2, [pc, #396]	; (800161c <MX_GPIO_Init+0x1e4>)
 8001490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <MX_GPIO_Init+0x1e4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a5c      	ldr	r2, [pc, #368]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b5a      	ldr	r3, [pc, #360]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a55      	ldr	r2, [pc, #340]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a4e      	ldr	r2, [pc, #312]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <MX_GPIO_Init+0x1e4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2108      	movs	r1, #8
 80014fa:	4849      	ldr	r0, [pc, #292]	; (8001620 <MX_GPIO_Init+0x1e8>)
 80014fc:	f000 fdc2 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2101      	movs	r1, #1
 8001504:	4847      	ldr	r0, [pc, #284]	; (8001624 <MX_GPIO_Init+0x1ec>)
 8001506:	f000 fdbd 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800150a:	2200      	movs	r2, #0
 800150c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001510:	4845      	ldr	r0, [pc, #276]	; (8001628 <MX_GPIO_Init+0x1f0>)
 8001512:	f000 fdb7 	bl	8002084 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001516:	2308      	movs	r3, #8
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	483c      	ldr	r0, [pc, #240]	; (8001620 <MX_GPIO_Init+0x1e8>)
 800152e:	f000 fc0d 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	4836      	ldr	r0, [pc, #216]	; (8001624 <MX_GPIO_Init+0x1ec>)
 800154a:	f000 fbff 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800154e:	2308      	movs	r3, #8
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800155e:	2305      	movs	r3, #5
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	482e      	ldr	r0, [pc, #184]	; (8001624 <MX_GPIO_Init+0x1ec>)
 800156a:	f000 fbef 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156e:	2301      	movs	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001572:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	482a      	ldr	r0, [pc, #168]	; (800162c <MX_GPIO_Init+0x1f4>)
 8001584:	f000 fbe2 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001588:	2304      	movs	r3, #4
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4825      	ldr	r0, [pc, #148]	; (8001630 <MX_GPIO_Init+0x1f8>)
 800159c:	f000 fbd6 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b2:	2305      	movs	r3, #5
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	481c      	ldr	r0, [pc, #112]	; (8001630 <MX_GPIO_Init+0x1f8>)
 80015be:	f000 fbc5 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80015dc:	f000 fbb6 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015e0:	2320      	movs	r3, #32
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <MX_GPIO_Init+0x1f0>)
 80015f4:	f000 fbaa 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_GPIO_Init+0x1e8>)
 800160e:	f000 fb9d 	bl	8001d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	; 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40020800 	.word	0x40020800
 8001628:	40020c00 	.word	0x40020c00
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	e7fe      	b.n	800163c <Error_Handler+0x8>
	...

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <HAL_MspInit+0x4c>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_MspInit+0x4c>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167e:	2007      	movs	r0, #7
 8001680:	f000 fb22 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_I2C_MspInit+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12c      	bne.n	800170c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	2312      	movs	r3, #18
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e0:	2304      	movs	r3, #4
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <HAL_I2C_MspInit+0x8c>)
 80016ec:	f000 fb2e 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_I2C_MspInit+0x88>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40005400 	.word	0x40005400
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400

08001720 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a31      	ldr	r2, [pc, #196]	; (8001810 <HAL_I2S_MspInit+0xf0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d15a      	bne.n	8001806 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001750:	2301      	movs	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001754:	23c0      	movs	r3, #192	; 0xc0
 8001756:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fac5 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800176c:	f7ff ff62 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 800177a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6313      	str	r3, [r2, #48]	; 0x30
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_I2S_MspInit+0xf4>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017c4:	2310      	movs	r3, #16
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d4:	2306      	movs	r3, #6
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <HAL_I2S_MspInit+0xf8>)
 80017e0:	f000 fab4 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017e4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f6:	2306      	movs	r3, #6
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	4806      	ldr	r0, [pc, #24]	; (800181c <HAL_I2S_MspInit+0xfc>)
 8001802:	f000 faa3 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3738      	adds	r7, #56	; 0x38
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40003c00 	.word	0x40003c00
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020800 	.word	0x40020800

08001820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_SPI_MspInit+0x84>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12b      	bne.n	800189a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 800184c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_SPI_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800187a:	23e0      	movs	r3, #224	; 0xe0
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188a:	2305      	movs	r3, #5
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_SPI_MspInit+0x8c>)
 8001896:	f000 fa59 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013000 	.word	0x40013000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 f8d0 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <OTG_FS_IRQHandler+0x10>)
 800190a:	f000 fe3f 	bl	800258c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200005c0 	.word	0x200005c0

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f007 ff4c 	bl	80097e4 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20020000 	.word	0x20020000
 8001978:	00000400 	.word	0x00000400
 800197c:	200001dc 	.word	0x200001dc
 8001980:	20000a10 	.word	0x20000a10

08001984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ae:	490e      	ldr	r1, [pc, #56]	; (80019e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b0:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c4:	4c0b      	ldr	r4, [pc, #44]	; (80019f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019d2:	f7ff ffd7 	bl	8001984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f007 ff0b 	bl	80097f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff fc15 	bl	8001208 <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80019ec:	0800991c 	.word	0x0800991c
  ldr r2, =_sbss
 80019f0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80019f4:	20000a0c 	.word	0x20000a0c

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <HAL_Init+0x40>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_Init+0x40>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_Init+0x40>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f94f 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f808 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fe06 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x58>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f967 	bl	8001d32 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f92f 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <HAL_InitTick+0x5c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	200001e0 	.word	0x200001e0

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200001e0 	.word	0x200001e0

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e16b      	b.n	8002040 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 815a 	bne.w	800203a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80b4 	beq.w	800203a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b60      	ldr	r3, [pc, #384]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a5b      	ldr	r2, [pc, #364]	; (800205c <HAL_GPIO_Init+0x310>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x314>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x226>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_GPIO_Init+0x318>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x31c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4f      	ldr	r2, [pc, #316]	; (800206c <HAL_GPIO_Init+0x320>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x328>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <HAL_GPIO_Init+0x32c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4b      	ldr	r2, [pc, #300]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x20a>
 8001f52:	2307      	movs	r3, #7
 8001f54:	e00e      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f72:	2300      	movs	r3, #0
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f84:	4935      	ldr	r1, [pc, #212]	; (800205c <HAL_GPIO_Init+0x310>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a32      	ldr	r2, [pc, #200]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200a:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_GPIO_Init+0x334>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_GPIO_Init+0x334>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_GPIO_Init+0x334>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	f67f ae90 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40021400 	.word	0x40021400
 8002078:	40021800 	.word	0x40021800
 800207c:	40021c00 	.word	0x40021c00
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b8:	b08f      	sub	sp, #60	; 0x3c
 80020ba:	af0a      	add	r7, sp, #40	; 0x28
 80020bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e054      	b.n	8002172 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f007 f800 	bl	80090e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2203      	movs	r2, #3
 80020ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f82d 	bl	8006166 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	687e      	ldr	r6, [r7, #4]
 8002114:	466d      	mov	r5, sp
 8002116:	f106 0410 	add.w	r4, r6, #16
 800211a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002126:	e885 0003 	stmia.w	r5, {r0, r1}
 800212a:	1d33      	adds	r3, r6, #4
 800212c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212e:	6838      	ldr	r0, [r7, #0]
 8002130:	f003 ffa7 	bl	8006082 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	4618      	mov	r0, r3
 800213c:	f004 f824 	bl	8006188 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	687e      	ldr	r6, [r7, #4]
 8002148:	466d      	mov	r5, sp
 800214a:	f106 0410 	add.w	r4, r6, #16
 800214e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002156:	e894 0003 	ldmia.w	r4, {r0, r1}
 800215a:	e885 0003 	stmia.w	r5, {r0, r1}
 800215e:	1d33      	adds	r3, r6, #4
 8002160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	f004 f9ac 	bl	80064c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800217a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800217a:	b590      	push	{r4, r7, lr}
 800217c:	b089      	sub	sp, #36	; 0x24
 800217e:	af04      	add	r7, sp, #16
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	4608      	mov	r0, r1
 8002184:	4611      	mov	r1, r2
 8002186:	461a      	mov	r2, r3
 8002188:	4603      	mov	r3, r0
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	460b      	mov	r3, r1
 800218e:	70bb      	strb	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_HCD_HC_Init+0x28>
 800219e:	2302      	movs	r3, #2
 80021a0:	e076      	b.n	8002290 <HAL_HCD_HC_Init+0x116>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	333d      	adds	r3, #61	; 0x3d
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3338      	adds	r3, #56	; 0x38
 80021ca:	787a      	ldrb	r2, [r7, #1]
 80021cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3340      	adds	r3, #64	; 0x40
 80021dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3339      	adds	r3, #57	; 0x39
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	333f      	adds	r3, #63	; 0x3f
 8002200:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002204:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	78ba      	ldrb	r2, [r7, #2]
 800220a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800220e:	b2d0      	uxtb	r0, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	333a      	adds	r3, #58	; 0x3a
 800221c:	4602      	mov	r2, r0
 800221e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002220:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002224:	2b00      	cmp	r3, #0
 8002226:	da09      	bge.n	800223c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	333b      	adds	r3, #59	; 0x3b
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e008      	b.n	800224e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	333b      	adds	r3, #59	; 0x3b
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	333c      	adds	r3, #60	; 0x3c
 800225c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002260:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	787c      	ldrb	r4, [r7, #1]
 8002268:	78ba      	ldrb	r2, [r7, #2]
 800226a:	78f9      	ldrb	r1, [r7, #3]
 800226c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	f897 3020 	ldrb.w	r3, [r7, #32]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4623      	mov	r3, r4
 800227e:	f004 faa5 	bl	80067cc <USB_HC_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}

08002298 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_HCD_HC_Halt+0x1e>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e00f      	b.n	80022d6 <HAL_HCD_HC_Halt+0x3e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 fcf5 	bl	8006cb6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	70fb      	strb	r3, [r7, #3]
 80022f2:	460b      	mov	r3, r1
 80022f4:	70bb      	strb	r3, [r7, #2]
 80022f6:	4613      	mov	r3, r2
 80022f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333b      	adds	r3, #59	; 0x3b
 8002308:	78ba      	ldrb	r2, [r7, #2]
 800230a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	333f      	adds	r3, #63	; 0x3f
 800231a:	787a      	ldrb	r2, [r7, #1]
 800231c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800231e:	7c3b      	ldrb	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d112      	bne.n	800234a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3342      	adds	r3, #66	; 0x42
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	333d      	adds	r3, #61	; 0x3d
 8002344:	7f3a      	ldrb	r2, [r7, #28]
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e008      	b.n	800235c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3342      	adds	r3, #66	; 0x42
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b03      	cmp	r3, #3
 8002360:	f200 80c6 	bhi.w	80024f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	0800237d 	.word	0x0800237d
 8002370:	080024dd 	.word	0x080024dd
 8002374:	080023e1 	.word	0x080023e1
 8002378:	0800245f 	.word	0x0800245f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800237c:	7c3b      	ldrb	r3, [r7, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	f040 80b8 	bne.w	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002384:	78bb      	ldrb	r3, [r7, #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 80b4 	bne.w	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800238c:	8b3b      	ldrh	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3355      	adds	r3, #85	; 0x55
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3355      	adds	r3, #85	; 0x55
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3342      	adds	r3, #66	; 0x42
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023ca:	e093      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3342      	adds	r3, #66	; 0x42
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
      break;
 80023de:	e089      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023e0:	78bb      	ldrb	r3, [r7, #2]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11d      	bne.n	8002422 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3355      	adds	r3, #85	; 0x55
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3342      	adds	r3, #66	; 0x42
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800240c:	e073      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3342      	adds	r3, #66	; 0x42
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
      break;
 8002420:	e069      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3354      	adds	r3, #84	; 0x54
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3342      	adds	r3, #66	; 0x42
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
      break;
 8002448:	e055      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3342      	adds	r3, #66	; 0x42
 8002458:	2202      	movs	r2, #2
 800245a:	701a      	strb	r2, [r3, #0]
      break;
 800245c:	e04b      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800245e:	78bb      	ldrb	r3, [r7, #2]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11d      	bne.n	80024a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3355      	adds	r3, #85	; 0x55
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3342      	adds	r3, #66	; 0x42
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800248a:	e034      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3342      	adds	r3, #66	; 0x42
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
      break;
 800249e:	e02a      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3354      	adds	r3, #84	; 0x54
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3342      	adds	r3, #66	; 0x42
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
      break;
 80024c6:	e016      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3342      	adds	r3, #66	; 0x42
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
      break;
 80024da:	e00c      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3342      	adds	r3, #66	; 0x42
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80024f0:	bf00      	nop
 80024f2:	e000      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80024f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3344      	adds	r3, #68	; 0x44
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	8b3a      	ldrh	r2, [r7, #24]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	202c      	movs	r0, #44	; 0x2c
 8002510:	fb00 f303 	mul.w	r3, r0, r3
 8002514:	440b      	add	r3, r1
 8002516:	334c      	adds	r3, #76	; 0x4c
 8002518:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3360      	adds	r3, #96	; 0x60
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3350      	adds	r3, #80	; 0x50
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3339      	adds	r3, #57	; 0x39
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	222c      	movs	r2, #44	; 0x2c
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	3338      	adds	r3, #56	; 0x38
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	18d1      	adds	r1, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	f004 fa48 	bl	8006a10 <USB_HC_StartXfer>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 ff49 	bl	800643a <USB_GetMode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 80f6 	bne.w	800279c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 ff2d 	bl	8006414 <USB_ReadInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80ec 	beq.w	800279a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 ff24 	bl	8006414 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d6:	d104      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ff14 	bl	8006414 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f6:	d104      	bne.n	8002602 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 ff04 	bl	8006414 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002616:	d104      	bne.n	8002622 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002620:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fef4 	bl	8006414 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2202      	movs	r2, #2
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fee6 	bl	8006414 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002652:	d11c      	bne.n	800268e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800265c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800266e:	2110      	movs	r1, #16
 8002670:	6938      	ldr	r0, [r7, #16]
 8002672:	f003 fdd5 	bl	8006220 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002676:	6938      	ldr	r0, [r7, #16]
 8002678:	f003 fe06 	bl	8006288 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f003 ffdc 	bl	8006640 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f006 fdab 	bl	80091e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f003 febe 	bl	8006414 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a2:	d102      	bne.n	80026aa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f001 f89e 	bl	80037e6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 feb0 	bl	8006414 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d106      	bne.n	80026cc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f006 fd74 	bl	80091ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fe9f 	bl	8006414 <USB_ReadInterrupts>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d101      	bne.n	80026e4 <HAL_HCD_IRQHandler+0x158>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_HCD_IRQHandler+0x15a>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0210 	bic.w	r2, r2, #16
 80026f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 ffa1 	bl	8003642 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0210 	orr.w	r2, r2, #16
 800270e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fe7d 	bl	8006414 <USB_ReadInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002724:	d13a      	bne.n	800279c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fab2 	bl	8006c94 <USB_HC_ReadInterrupt>
 8002730:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e025      	b.n	8002784 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d018      	beq.n	800277e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002762:	d106      	bne.n	8002772 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8ab 	bl	80028c6 <HCD_HC_IN_IRQHandler>
 8002770:	e005      	b.n	800277e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fbf9 	bl	8002f70 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	429a      	cmp	r2, r3
 800278c:	d3d4      	bcc.n	8002738 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002796:	615a      	str	r2, [r3, #20]
 8002798:	e000      	b.n	800279c <HAL_HCD_IRQHandler+0x210>
      return;
 800279a:	bf00      	nop
    }
  }
}
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_HCD_Start+0x16>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e013      	b.n	80027e0 <HAL_HCD_Start+0x3e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 ff9e 	bl	8006708 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fcb7 	bl	8006144 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_HCD_Stop+0x16>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e00d      	b.n	800281a <HAL_HCD_Stop+0x32>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f004 fb8c 	bl	8006f28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 ff40 	bl	80066b4 <USB_ResetPort>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3360      	adds	r3, #96	; 0x60
 8002858:	781b      	ldrb	r3, [r3, #0]
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3350      	adds	r3, #80	; 0x50
 8002880:	681b      	ldr	r3, [r3, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 ff84 	bl	80067a8 <USB_GetCurrentFrame>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 ff5f 	bl	800677a <USB_GetHostSpeed>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d11a      	bne.n	800292c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	2304      	movs	r3, #4
 8002906:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3361      	adds	r3, #97	; 0x61
 8002916:	2206      	movs	r2, #6
 8002918:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f004 f9c6 	bl	8006cb6 <USB_HC_Halt>
 800292a:	e0af      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002942:	d11b      	bne.n	800297c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002956:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3361      	adds	r3, #97	; 0x61
 8002966:	2207      	movs	r2, #7
 8002968:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f004 f99e 	bl	8006cb6 <USB_HC_Halt>
 800297a:	e087      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b20      	cmp	r3, #32
 8002990:	d109      	bne.n	80029a6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	2320      	movs	r3, #32
 80029a2:	6093      	str	r3, [r2, #8]
 80029a4:	e072      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d11a      	bne.n	80029f2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	461a      	mov	r2, r3
 80029ca:	2308      	movs	r3, #8
 80029cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3361      	adds	r3, #97	; 0x61
 80029dc:	2205      	movs	r2, #5
 80029de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 f963 	bl	8006cb6 <USB_HC_Halt>
 80029f0:	e04c      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a08:	d11b      	bne.n	8002a42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3361      	adds	r3, #97	; 0x61
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f93b 	bl	8006cb6 <USB_HC_Halt>
 8002a40:	e024      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d119      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3361      	adds	r3, #97	; 0x61
 8002a78:	2206      	movs	r2, #6
 8002a7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 f915 	bl	8006cb6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa2:	d112      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 f901 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ac8:	e24e      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 80df 	bne.w	8002ca0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d019      	beq.n	8002b1e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3348      	adds	r3, #72	; 0x48
 8002af8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	0159      	lsls	r1, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	440b      	add	r3, r1
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	202c      	movs	r0, #44	; 0x2c
 8002b14:	fb00 f303 	mul.w	r3, r0, r3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3350      	adds	r3, #80	; 0x50
 8002b1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	335c      	adds	r3, #92	; 0x5c
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2301      	movs	r3, #1
 8002b52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	333f      	adds	r3, #63	; 0x3f
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	333f      	adds	r3, #63	; 0x3f
 8002b76:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d111      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 f895 	bl	8006cb6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2310      	movs	r3, #16
 8002b9c:	6093      	str	r3, [r2, #8]
 8002b9e:	e03a      	b.n	8002c16 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	333f      	adds	r3, #63	; 0x3f
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d009      	beq.n	8002bc8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	333f      	adds	r3, #63	; 0x3f
 8002bc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d126      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	0151      	lsls	r1, r2, #5
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	440a      	add	r2, r1
 8002bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002be6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	b2d9      	uxtb	r1, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	202c      	movs	r0, #44	; 0x2c
 8002c04:	fb00 f303 	mul.w	r3, r0, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3360      	adds	r3, #96	; 0x60
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f006 faf5 	bl	8009200 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d12b      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3348      	adds	r3, #72	; 0x48
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	202c      	movs	r0, #44	; 0x2c
 8002c34:	fb00 f202 	mul.w	r2, r0, r2
 8002c38:	440a      	add	r2, r1
 8002c3a:	3240      	adds	r2, #64	; 0x40
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 818e 	beq.w	8002f68 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3354      	adds	r3, #84	; 0x54
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2d8      	uxtb	r0, r3
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3354      	adds	r3, #84	; 0x54
 8002c70:	4602      	mov	r2, r0
 8002c72:	701a      	strb	r2, [r3, #0]
}
 8002c74:	e178      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3354      	adds	r3, #84	; 0x54
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2d8      	uxtb	r0, r3
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3354      	adds	r3, #84	; 0x54
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	701a      	strb	r2, [r3, #0]
}
 8002c9e:	e163      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	f040 80f6 	bne.w	8002ea4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3361      	adds	r3, #97	; 0x61
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d109      	bne.n	8002ce0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3360      	adds	r3, #96	; 0x60
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e0c9      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3361      	adds	r3, #97	; 0x61
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d109      	bne.n	8002d08 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	2205      	movs	r2, #5
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e0b5      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3361      	adds	r3, #97	; 0x61
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d009      	beq.n	8002d30 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3361      	adds	r3, #97	; 0x61
 8002d2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d150      	bne.n	8002dd2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	335c      	adds	r3, #92	; 0x5c
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	202c      	movs	r0, #44	; 0x2c
 8002d48:	fb00 f303 	mul.w	r3, r0, r3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	335c      	adds	r3, #92	; 0x5c
 8002d50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	335c      	adds	r3, #92	; 0x5c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d912      	bls.n	8002d8c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	335c      	adds	r3, #92	; 0x5c
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3360      	adds	r3, #96	; 0x60
 8002d86:	2204      	movs	r2, #4
 8002d88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d8a:	e073      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3360      	adds	r3, #96	; 0x60
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002db4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dbc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dd0:	e050      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3361      	adds	r3, #97	; 0x61
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d122      	bne.n	8002e2c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3360      	adds	r3, #96	; 0x60
 8002df4:	2202      	movs	r2, #2
 8002df6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e023      	b.n	8002e74 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3361      	adds	r3, #97	; 0x61
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b07      	cmp	r3, #7
 8002e3e:	d119      	bne.n	8002e74 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	335c      	adds	r3, #92	; 0x5c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	202c      	movs	r0, #44	; 0x2c
 8002e58:	fb00 f303 	mul.w	r3, r0, r3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	335c      	adds	r3, #92	; 0x5c
 8002e60:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3360      	adds	r3, #96	; 0x60
 8002e70:	2204      	movs	r2, #4
 8002e72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2302      	movs	r3, #2
 8002e84:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	b2d9      	uxtb	r1, r3
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	202c      	movs	r0, #44	; 0x2c
 8002e90:	fb00 f303 	mul.w	r3, r0, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3360      	adds	r3, #96	; 0x60
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f006 f9af 	bl	8009200 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ea2:	e061      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d156      	bne.n	8002f68 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	333f      	adds	r3, #63	; 0x3f
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d111      	bne.n	8002ef2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	335c      	adds	r3, #92	; 0x5c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fee3 	bl	8006cb6 <USB_HC_Halt>
 8002ef0:	e031      	b.n	8002f56 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	333f      	adds	r3, #63	; 0x3f
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	333f      	adds	r3, #63	; 0x3f
 8002f14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d11d      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	335c      	adds	r3, #92	; 0x5c
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d110      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	3361      	adds	r3, #97	; 0x61
 8002f42:	2203      	movs	r2, #3
 8002f44:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 feb0 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	2310      	movs	r3, #16
 8002f66:	6093      	str	r3, [r2, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d11a      	bne.n	8002fd6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	2304      	movs	r3, #4
 8002fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3361      	adds	r3, #97	; 0x61
 8002fc0:	2206      	movs	r2, #6
 8002fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fe71 	bl	8006cb6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002fd4:	e331      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d12e      	bne.n	800304a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	333d      	adds	r3, #61	; 0x3d
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	f040 8313 	bne.w	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	333d      	adds	r3, #61	; 0x3d
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	3360      	adds	r3, #96	; 0x60
 8003034:	2202      	movs	r2, #2
 8003036:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fe37 	bl	8006cb6 <USB_HC_Halt>
}
 8003048:	e2f7      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d112      	bne.n	8003088 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	461a      	mov	r2, r3
 8003070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003074:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f003 fe18 	bl	8006cb6 <USB_HC_Halt>
}
 8003086:	e2d8      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d140      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	335c      	adds	r3, #92	; 0x5c
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d111      	bne.n	80030ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	333d      	adds	r3, #61	; 0x3d
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	2340      	movs	r3, #64	; 0x40
 80030e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	461a      	mov	r2, r3
 80030f8:	2301      	movs	r3, #1
 80030fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	; 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3361      	adds	r3, #97	; 0x61
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fdcc 	bl	8006cb6 <USB_HC_Halt>
}
 800311e:	e28c      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d12c      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3361      	adds	r3, #97	; 0x61
 8003144:	2204      	movs	r2, #4
 8003146:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	333d      	adds	r3, #61	; 0x3d
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	335c      	adds	r3, #92	; 0x5c
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fd9d 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	6093      	str	r3, [r2, #8]
}
 800318e:	e254      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11a      	bne.n	80031dc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	2308      	movs	r3, #8
 80031b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3361      	adds	r3, #97	; 0x61
 80031c6:	2205      	movs	r2, #5
 80031c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fd6e 	bl	8006cb6 <USB_HC_Halt>
}
 80031da:	e22e      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d140      	bne.n	8003274 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	335c      	adds	r3, #92	; 0x5c
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3361      	adds	r3, #97	; 0x61
 8003212:	2203      	movs	r2, #3
 8003214:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	333d      	adds	r3, #61	; 0x3d
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d112      	bne.n	8003250 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	333c      	adds	r3, #60	; 0x3c
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	333d      	adds	r3, #61	; 0x3d
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fd2b 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	461a      	mov	r2, r3
 800326e:	2310      	movs	r3, #16
 8003270:	6093      	str	r3, [r2, #8]
}
 8003272:	e1e2      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d164      	bne.n	8003354 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d111      	bne.n	80032b6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3361      	adds	r3, #97	; 0x61
 80032a0:	2206      	movs	r2, #6
 80032a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 fd01 	bl	8006cb6 <USB_HC_Halt>
 80032b4:	e044      	b.n	8003340 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	202c      	movs	r0, #44	; 0x2c
 80032ce:	fb00 f303 	mul.w	r3, r0, r3
 80032d2:	440b      	add	r3, r1
 80032d4:	335c      	adds	r3, #92	; 0x5c
 80032d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	335c      	adds	r3, #92	; 0x5c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d920      	bls.n	800332e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	335c      	adds	r3, #92	; 0x5c
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3360      	adds	r3, #96	; 0x60
 800330c:	2204      	movs	r2, #4
 800330e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	b2d9      	uxtb	r1, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	202c      	movs	r0, #44	; 0x2c
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	4413      	add	r3, r2
 8003320:	3360      	adds	r3, #96	; 0x60
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f005 ff6a 	bl	8009200 <HAL_HCD_HC_NotifyURBChange_Callback>
 800332c:	e008      	b.n	8003340 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3360      	adds	r3, #96	; 0x60
 800333c:	2202      	movs	r2, #2
 800333e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	461a      	mov	r2, r3
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	6093      	str	r3, [r2, #8]
}
 8003352:	e172      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d11b      	bne.n	80033a4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3361      	adds	r3, #97	; 0x61
 800337a:	2208      	movs	r2, #8
 800337c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fc94 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a0:	6093      	str	r3, [r2, #8]
}
 80033a2:	e14a      	b.n	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	f040 813f 	bne.w	800363a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3361      	adds	r3, #97	; 0x61
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d17d      	bne.n	80034cc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3360      	adds	r3, #96	; 0x60
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	333f      	adds	r3, #63	; 0x3f
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d00a      	beq.n	800340c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	333f      	adds	r3, #63	; 0x3f
 8003404:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003406:	2b03      	cmp	r3, #3
 8003408:	f040 8100 	bne.w	800360c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d113      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3355      	adds	r3, #85	; 0x55
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2d8      	uxtb	r0, r3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3355      	adds	r3, #85	; 0x55
 8003438:	4602      	mov	r2, r0
 800343a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b01      	cmp	r3, #1
 8003442:	f040 80e3 	bne.w	800360c <HCD_HC_OUT_IRQHandler+0x69c>
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	334c      	adds	r3, #76	; 0x4c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80d8 	beq.w	800360c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	334c      	adds	r3, #76	; 0x4c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	202c      	movs	r0, #44	; 0x2c
 8003472:	fb00 f202 	mul.w	r2, r0, r2
 8003476:	440a      	add	r2, r1
 8003478:	3240      	adds	r2, #64	; 0x40
 800347a:	8812      	ldrh	r2, [r2, #0]
 800347c:	4413      	add	r3, r2
 800347e:	3b01      	subs	r3, #1
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	202c      	movs	r0, #44	; 0x2c
 8003486:	fb00 f202 	mul.w	r2, r0, r2
 800348a:	440a      	add	r2, r1
 800348c:	3240      	adds	r2, #64	; 0x40
 800348e:	8812      	ldrh	r2, [r2, #0]
 8003490:	fbb3 f3f2 	udiv	r3, r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80b5 	beq.w	800360c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3355      	adds	r3, #85	; 0x55
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f083 0301 	eor.w	r3, r3, #1
 80034b6:	b2d8      	uxtb	r0, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3355      	adds	r3, #85	; 0x55
 80034c6:	4602      	mov	r2, r0
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e09f      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3361      	adds	r3, #97	; 0x61
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d109      	bne.n	80034f4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3360      	adds	r3, #96	; 0x60
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e08b      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	3361      	adds	r3, #97	; 0x61
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d109      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3360      	adds	r3, #96	; 0x60
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e077      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3361      	adds	r3, #97	; 0x61
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d109      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3360      	adds	r3, #96	; 0x60
 800353e:	2205      	movs	r2, #5
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e063      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3361      	adds	r3, #97	; 0x61
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d009      	beq.n	800356c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3361      	adds	r3, #97	; 0x61
 8003566:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003568:	2b08      	cmp	r3, #8
 800356a:	d14f      	bne.n	800360c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	335c      	adds	r3, #92	; 0x5c
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	202c      	movs	r0, #44	; 0x2c
 8003584:	fb00 f303 	mul.w	r3, r0, r3
 8003588:	440b      	add	r3, r1
 800358a:	335c      	adds	r3, #92	; 0x5c
 800358c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	335c      	adds	r3, #92	; 0x5c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d912      	bls.n	80035c8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	335c      	adds	r3, #92	; 0x5c
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3360      	adds	r3, #96	; 0x60
 80035c2:	2204      	movs	r2, #4
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	e021      	b.n	800360c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3360      	adds	r3, #96	; 0x60
 80035d6:	2202      	movs	r2, #2
 80035d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035f0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035f8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	461a      	mov	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2302      	movs	r3, #2
 800361c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	b2d9      	uxtb	r1, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	202c      	movs	r0, #44	; 0x2c
 8003628:	fb00 f303 	mul.w	r3, r0, r3
 800362c:	4413      	add	r3, r2
 800362e:	3360      	adds	r3, #96	; 0x60
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f005 fde3 	bl	8009200 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b08a      	sub	sp, #40	; 0x28
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	0c5b      	lsrs	r3, r3, #17
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003676:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d004      	beq.n	8003688 <HCD_RXQLVL_IRQHandler+0x46>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b05      	cmp	r3, #5
 8003682:	f000 80a9 	beq.w	80037d8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003686:	e0aa      	b.n	80037de <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80a6 	beq.w	80037dc <HCD_RXQLVL_IRQHandler+0x19a>
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3344      	adds	r3, #68	; 0x44
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 809b 	beq.w	80037dc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3350      	adds	r3, #80	; 0x50
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	441a      	add	r2, r3
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	202c      	movs	r0, #44	; 0x2c
 80036c0:	fb00 f303 	mul.w	r3, r0, r3
 80036c4:	440b      	add	r3, r1
 80036c6:	334c      	adds	r3, #76	; 0x4c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d87a      	bhi.n	80037c4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	3344      	adds	r3, #68	; 0x44
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	b292      	uxth	r2, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f002 fe3c 	bl	8006364 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3344      	adds	r3, #68	; 0x44
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	441a      	add	r2, r3
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	202c      	movs	r0, #44	; 0x2c
 8003706:	fb00 f303 	mul.w	r3, r0, r3
 800370a:	440b      	add	r3, r1
 800370c:	3344      	adds	r3, #68	; 0x44
 800370e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3350      	adds	r3, #80	; 0x50
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	441a      	add	r2, r3
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	202c      	movs	r0, #44	; 0x2c
 800372a:	fb00 f303 	mul.w	r3, r0, r3
 800372e:	440b      	add	r3, r1
 8003730:	3350      	adds	r3, #80	; 0x50
 8003732:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	0cdb      	lsrs	r3, r3, #19
 8003744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003748:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3340      	adds	r3, #64	; 0x40
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4293      	cmp	r3, r2
 8003760:	d13c      	bne.n	80037dc <HCD_RXQLVL_IRQHandler+0x19a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d039      	beq.n	80037dc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800377e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003786:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	3354      	adds	r3, #84	; 0x54
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f083 0301 	eor.w	r3, r3, #1
 80037ae:	b2d8      	uxtb	r0, r3
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3354      	adds	r3, #84	; 0x54
 80037be:	4602      	mov	r2, r0
 80037c0:	701a      	strb	r2, [r3, #0]
      break;
 80037c2:	e00b      	b.n	80037dc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3360      	adds	r3, #96	; 0x60
 80037d2:	2204      	movs	r2, #4
 80037d4:	701a      	strb	r2, [r3, #0]
      break;
 80037d6:	e001      	b.n	80037dc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80037dc:	bf00      	nop
  }
}
 80037de:	bf00      	nop
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003812:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d10b      	bne.n	8003836 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f005 fccd 	bl	80091c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d132      	bne.n	80038a6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f043 0308 	orr.w	r3, r3, #8
 8003846:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d126      	bne.n	80038a0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d113      	bne.n	8003882 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003864:	d106      	bne.n	8003874 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2102      	movs	r1, #2
 800386c:	4618      	mov	r0, r3
 800386e:	f002 fee7 	bl	8006640 <USB_InitFSLSPClkSel>
 8003872:	e011      	b.n	8003898 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f002 fee0 	bl	8006640 <USB_InitFSLSPClkSel>
 8003880:	e00a      	b.n	8003898 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d106      	bne.n	8003898 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003890:	461a      	mov	r2, r3
 8003892:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003896:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f005 fcbf 	bl	800921c <HAL_HCD_PortEnabled_Callback>
 800389e:	e002      	b.n	80038a6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f005 fcc9 	bl	8009238 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d103      	bne.n	80038b8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f043 0320 	orr.w	r3, r3, #32
 80038b6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e12b      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fecc 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003930:	f002 f9ca 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
 8003934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a81      	ldr	r2, [pc, #516]	; (8003b40 <HAL_I2C_Init+0x274>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d807      	bhi.n	8003950 <HAL_I2C_Init+0x84>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_I2C_Init+0x278>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e006      	b.n	800395e <HAL_I2C_Init+0x92>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a7d      	ldr	r2, [pc, #500]	; (8003b48 <HAL_I2C_Init+0x27c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	bf94      	ite	ls
 8003958:	2301      	movls	r3, #1
 800395a:	2300      	movhi	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0e7      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a78      	ldr	r2, [pc, #480]	; (8003b4c <HAL_I2C_Init+0x280>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0c9b      	lsrs	r3, r3, #18
 8003970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a6a      	ldr	r2, [pc, #424]	; (8003b40 <HAL_I2C_Init+0x274>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d802      	bhi.n	80039a0 <HAL_I2C_Init+0xd4>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3301      	adds	r3, #1
 800399e:	e009      	b.n	80039b4 <HAL_I2C_Init+0xe8>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	4a69      	ldr	r2, [pc, #420]	; (8003b50 <HAL_I2C_Init+0x284>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	495c      	ldr	r1, [pc, #368]	; (8003b40 <HAL_I2C_Init+0x274>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d819      	bhi.n	8003a08 <HAL_I2C_Init+0x13c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e59      	subs	r1, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e2:	1c59      	adds	r1, r3, #1
 80039e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e8:	400b      	ands	r3, r1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_I2C_Init+0x138>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e59      	subs	r1, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	e051      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a04:	2304      	movs	r3, #4
 8003a06:	e04f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <HAL_I2C_Init+0x168>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e012      	b.n	8003a5a <HAL_I2C_Init+0x18e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	0099      	lsls	r1, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Init+0x196>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e022      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10e      	bne.n	8003a88 <HAL_I2C_Init+0x1bc>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e58      	subs	r0, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	440b      	add	r3, r1
 8003a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	0099      	lsls	r1, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	6809      	ldr	r1, [r1, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6911      	ldr	r1, [r2, #16]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	000186a0 	.word	0x000186a0
 8003b44:	001e847f 	.word	0x001e847f
 8003b48:	003d08ff 	.word	0x003d08ff
 8003b4c:	431bde83 	.word	0x431bde83
 8003b50:	10624dd3 	.word	0x10624dd3

08003b54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	817b      	strh	r3, [r7, #10]
 8003b66:	460b      	mov	r3, r1
 8003b68:	813b      	strh	r3, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b6e:	f7fd ffab 	bl	8001ac8 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	f040 80d9 	bne.w	8003d34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2319      	movs	r3, #25
 8003b88:	2201      	movs	r2, #1
 8003b8a:	496d      	ldr	r1, [pc, #436]	; (8003d40 <HAL_I2C_Mem_Write+0x1ec>)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fdad 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0cc      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Mem_Write+0x56>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0c5      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d007      	beq.n	8003bd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2221      	movs	r2, #33	; 0x21
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2240      	movs	r2, #64	; 0x40
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <HAL_I2C_Mem_Write+0x1f0>)
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c12:	88f8      	ldrh	r0, [r7, #6]
 8003c14:	893a      	ldrh	r2, [r7, #8]
 8003c16:	8979      	ldrh	r1, [r7, #10]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	4603      	mov	r3, r0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fbe4 	bl	80043f0 <I2C_RequestMemoryWrite>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d052      	beq.n	8003cd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e081      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fe2e 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d107      	bne.n	8003c5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_I2C_Mem_Write+0x180>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1aa      	bne.n	8003c32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fe1a 	bl	800491a <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d107      	bne.n	8003d04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e016      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	00100002 	.word	0x00100002
 8003d44:	ffff0000 	.word	0xffff0000

08003d48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	; 0x30
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	817b      	strh	r3, [r7, #10]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	813b      	strh	r3, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d62:	f7fd feb1 	bl	8001ac8 <HAL_GetTick>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	f040 8208 	bne.w	8004186 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	2319      	movs	r3, #25
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	497b      	ldr	r1, [pc, #492]	; (8003f6c <HAL_I2C_Mem_Read+0x224>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fcb3 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e1fb      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_I2C_Mem_Read+0x56>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e1f4      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d007      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2222      	movs	r2, #34	; 0x22
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a5b      	ldr	r2, [pc, #364]	; (8003f70 <HAL_I2C_Mem_Read+0x228>)
 8003e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e06:	88f8      	ldrh	r0, [r7, #6]
 8003e08:	893a      	ldrh	r2, [r7, #8]
 8003e0a:	8979      	ldrh	r1, [r7, #10]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4603      	mov	r3, r0
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fb80 	bl	800451c <I2C_RequestMemoryRead>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1b0      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d113      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e184      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d11b      	bne.n	8003e96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e164      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	e144      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003eec:	e138      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	f200 80f1 	bhi.w	80040da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d123      	bne.n	8003f48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fd49 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e139      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f46:	e10b      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d14e      	bne.n	8003fee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	2200      	movs	r2, #0
 8003f58:	4906      	ldr	r1, [pc, #24]	; (8003f74 <HAL_I2C_Mem_Read+0x22c>)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fbc6 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e10e      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
 8003f6a:	bf00      	nop
 8003f6c:	00100002 	.word	0x00100002
 8003f70:	ffff0000 	.word	0xffff0000
 8003f74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fec:	e0b8      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4966      	ldr	r1, [pc, #408]	; (8004190 <HAL_I2C_Mem_Read+0x448>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fb77 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0bf      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2200      	movs	r2, #0
 8004052:	494f      	ldr	r1, [pc, #316]	; (8004190 <HAL_I2C_Mem_Read+0x448>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fb49 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e091      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d8:	e042      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fc5c 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e04c      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b04      	cmp	r3, #4
 800412c:	d118      	bne.n	8004160 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f aec2 	bne.w	8003eee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	00010004 	.word	0x00010004

08004194 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	460b      	mov	r3, r1
 80041a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041a4:	f7fd fc90 	bl	8001ac8 <HAL_GetTick>
 80041a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	f040 8111 	bne.w	80043de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2319      	movs	r3, #25
 80041c2:	2201      	movs	r2, #1
 80041c4:	4988      	ldr	r1, [pc, #544]	; (80043e8 <HAL_I2C_IsDeviceReady+0x254>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa90 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
 80041d4:	e104      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_I2C_IsDeviceReady+0x50>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0fd      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x24c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d007      	beq.n	800420a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004218:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2224      	movs	r2, #36	; 0x24
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a70      	ldr	r2, [pc, #448]	; (80043ec <HAL_I2C_IsDeviceReady+0x258>)
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa4e 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004264:	d103      	bne.n	800426e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0b6      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004280:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004282:	f7fd fc21 	bl	8001ac8 <HAL_GetTick>
 8004286:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042b6:	e025      	b.n	8004304 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fd fc06 	bl	8001ac8 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <HAL_I2C_IsDeviceReady+0x13a>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	22a0      	movs	r2, #160	; 0xa0
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2ba0      	cmp	r3, #160	; 0xa0
 800430e:	d005      	beq.n	800431c <HAL_I2C_IsDeviceReady+0x188>
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <HAL_I2C_IsDeviceReady+0x188>
 8004316:	7dbb      	ldrb	r3, [r7, #22]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0cd      	beq.n	80042b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b02      	cmp	r3, #2
 8004330:	d129      	bne.n	8004386 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004340:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2319      	movs	r3, #25
 800435e:	2201      	movs	r2, #1
 8004360:	4921      	ldr	r1, [pc, #132]	; (80043e8 <HAL_I2C_IsDeviceReady+0x254>)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f9c2 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e036      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e02c      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800439e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	490f      	ldr	r1, [pc, #60]	; (80043e8 <HAL_I2C_IsDeviceReady+0x254>)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f99e 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e012      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3301      	adds	r3, #1
 80043be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	f4ff af32 	bcc.w	800422e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000

080043f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2200      	movs	r2, #0
 8004422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f960 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004440:	d103      	bne.n	800444a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e05f      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800445c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	492d      	ldr	r1, [pc, #180]	; (8004518 <I2C_RequestMemoryWrite+0x128>)
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f998 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e04c      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fa02 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d107      	bne.n	80044b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e02b      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]
 80044c6:	e021      	b.n	800450c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044c8:	893b      	ldrh	r3, [r7, #8]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	6a39      	ldr	r1, [r7, #32]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f9dc 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d107      	bne.n	80044fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e005      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	00010002 	.word	0x00010002

0800451c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	817b      	strh	r3, [r7, #10]
 800452e:	460b      	mov	r3, r1
 8004530:	813b      	strh	r3, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2200      	movs	r2, #0
 800455e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f8c2 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	d103      	bne.n	8004586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e0aa      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	4952      	ldr	r1, [pc, #328]	; (80046e8 <I2C_RequestMemoryRead+0x1cc>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f8fa 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e097      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6a39      	ldr	r1, [r7, #32]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f964 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d107      	bne.n	80045ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e076      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]
 8004602:	e021      	b.n	8004648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004604:	893b      	ldrh	r3, [r7, #8]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	b29b      	uxth	r3, r3
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	6a39      	ldr	r1, [r7, #32]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f93e 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b04      	cmp	r3, #4
 8004628:	d107      	bne.n	800463a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e050      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800463e:	893b      	ldrh	r3, [r7, #8]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	6a39      	ldr	r1, [r7, #32]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f923 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2b04      	cmp	r3, #4
 800465e:	d107      	bne.n	8004670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e035      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2200      	movs	r2, #0
 800468c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f82b 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d103      	bne.n	80046b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e013      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046b8:	897b      	ldrh	r3, [r7, #10]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	4906      	ldr	r1, [pc, #24]	; (80046e8 <I2C_RequestMemoryRead+0x1cc>)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f863 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	00010002 	.word	0x00010002

080046ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046fc:	e025      	b.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d021      	beq.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fd f9df 	bl	8001ac8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d116      	bne.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e023      	b.n	8004792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d10d      	bne.n	8004770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	e00c      	b.n	800478a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	429a      	cmp	r2, r3
 800478e:	d0b6      	beq.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a8:	e051      	b.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	d123      	bne.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e046      	b.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d021      	beq.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fd f95d 	bl	8001ac8 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d116      	bne.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e020      	b.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10c      	bne.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e00b      	b.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d18d      	bne.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a4:	e02d      	b.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f8ce 	bl	8004a48 <I2C_IsAcknowledgeFailed>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02d      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d021      	beq.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fd f903 	bl	8001ac8 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e007      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d1ca      	bne.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004926:	e02d      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f88d 	bl	8004a48 <I2C_IsAcknowledgeFailed>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e02d      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d021      	beq.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004940:	f7fd f8c2 	bl	8001ac8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e007      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d1ca      	bne.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a8:	e042      	b.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d119      	bne.n	80049ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0210 	mvn.w	r2, #16
 80049c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e029      	b.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ec:	f7fd f86c 	bl	8001ac8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e007      	b.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d1b5      	bne.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d11b      	bne.n	8004a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f043 0204 	orr.w	r2, r3, #4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e128      	b.n	8004d0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a90      	ldr	r2, [pc, #576]	; (8004d14 <HAL_I2S_Init+0x26c>)
 8004ad2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fc fe23 	bl	8001720 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004af0:	f023 030f 	bic.w	r3, r3, #15
 8004af4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2202      	movs	r2, #2
 8004afc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d060      	beq.n	8004bc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b0e:	2310      	movs	r3, #16
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e001      	b.n	8004b18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b14:	2320      	movs	r3, #32
 8004b16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d802      	bhi.n	8004b26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b26:	2001      	movs	r0, #1
 8004b28:	f001 f9c4 	bl	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b36:	d125      	bne.n	8004b84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d010      	beq.n	8004b62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	3305      	adds	r3, #5
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	e01f      	b.n	8004ba2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	3305      	adds	r3, #5
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e00e      	b.n	8004ba2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	461a      	mov	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	3305      	adds	r3, #5
 8004ba0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4a5c      	ldr	r2, [pc, #368]	; (8004d18 <HAL_I2S_Init+0x270>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e003      	b.n	8004bd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d902      	bls.n	8004bdc <HAL_I2S_Init+0x134>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2bff      	cmp	r3, #255	; 0xff
 8004bda:	d907      	bls.n	8004bec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be0:	f043 0210 	orr.w	r2, r3, #16
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e08f      	b.n	8004d0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	ea42 0103 	orr.w	r1, r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c0a:	f023 030f 	bic.w	r3, r3, #15
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6851      	ldr	r1, [r2, #4]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6892      	ldr	r2, [r2, #8]
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	68d2      	ldr	r2, [r2, #12]
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6992      	ldr	r2, [r2, #24]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d161      	bne.n	8004cfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <HAL_I2S_Init+0x274>)
 8004c3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <HAL_I2S_Init+0x278>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d101      	bne.n	8004c4c <HAL_I2S_Init+0x1a4>
 8004c48:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <HAL_I2S_Init+0x27c>)
 8004c4a:	e001      	b.n	8004c50 <HAL_I2S_Init+0x1a8>
 8004c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4932      	ldr	r1, [pc, #200]	; (8004d20 <HAL_I2S_Init+0x278>)
 8004c58:	428a      	cmp	r2, r1
 8004c5a:	d101      	bne.n	8004c60 <HAL_I2S_Init+0x1b8>
 8004c5c:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <HAL_I2S_Init+0x27c>)
 8004c5e:	e001      	b.n	8004c64 <HAL_I2S_Init+0x1bc>
 8004c60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c68:	f023 030f 	bic.w	r3, r3, #15
 8004c6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <HAL_I2S_Init+0x278>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_I2S_Init+0x1d4>
 8004c78:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <HAL_I2S_Init+0x27c>)
 8004c7a:	e001      	b.n	8004c80 <HAL_I2S_Init+0x1d8>
 8004c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c80:	2202      	movs	r2, #2
 8004c82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <HAL_I2S_Init+0x278>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2S_Init+0x1ea>
 8004c8e:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <HAL_I2S_Init+0x27c>)
 8004c90:	e001      	b.n	8004c96 <HAL_I2S_Init+0x1ee>
 8004c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca2:	d003      	beq.n	8004cac <HAL_I2S_Init+0x204>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e001      	b.n	8004cb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ce4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <HAL_I2S_Init+0x278>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d101      	bne.n	8004cf4 <HAL_I2S_Init+0x24c>
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <HAL_I2S_Init+0x27c>)
 8004cf2:	e001      	b.n	8004cf8 <HAL_I2S_Init+0x250>
 8004cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cf8:	897a      	ldrh	r2, [r7, #10]
 8004cfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08004e1f 	.word	0x08004e1f
 8004d18:	cccccccd 	.word	0xcccccccd
 8004d1c:	08004f35 	.word	0x08004f35
 8004d20:	40003800 	.word	0x40003800
 8004d24:	40003400 	.word	0x40003400

08004d28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	881a      	ldrh	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c9a      	adds	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10e      	bne.n	8004db8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004da8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ffb8 	bl	8004d28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10e      	bne.n	8004e16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff93 	bl	8004d3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d13a      	bne.n	8004eb0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d109      	bne.n	8004e58 <I2S_IRQHandler+0x3a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d102      	bne.n	8004e58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff ffb4 	bl	8004dc0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d126      	bne.n	8004eb0 <I2S_IRQHandler+0x92>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d11f      	bne.n	8004eb0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f043 0202 	orr.w	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ff50 	bl	8004d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d136      	bne.n	8004f2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d109      	bne.n	8004eda <I2S_IRQHandler+0xbc>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d102      	bne.n	8004eda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff45 	bl	8004d64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d122      	bne.n	8004f2a <I2S_IRQHandler+0x10c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d11b      	bne.n	8004f2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	f043 0204 	orr.w	r2, r3, #4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ff13 	bl	8004d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a92      	ldr	r2, [pc, #584]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f4e:	4b92      	ldr	r3, [pc, #584]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f50:	e001      	b.n	8004f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a8b      	ldr	r2, [pc, #556]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f6c:	4b8a      	ldr	r3, [pc, #552]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f6e:	e001      	b.n	8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f80:	d004      	beq.n	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f040 8099 	bne.w	80050be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d107      	bne.n	8004fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f925 	bl	80051f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9c8 	bl	8005350 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d13a      	bne.n	8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d035      	beq.n	8005040 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a6e      	ldr	r2, [pc, #440]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004fde:	4b6e      	ldr	r3, [pc, #440]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fe0:	e001      	b.n	8004fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4969      	ldr	r1, [pc, #420]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fee:	428b      	cmp	r3, r1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ff2:	4b69      	ldr	r3, [pc, #420]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ff4:	e001      	b.n	8004ffa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ffe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800500e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	f043 0202 	orr.w	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fe88 	bl	8004d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b08      	cmp	r3, #8
 8005048:	f040 80c3 	bne.w	80051d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80bd 	beq.w	80051d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005066:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a49      	ldr	r2, [pc, #292]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d101      	bne.n	8005076 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005072:	4b49      	ldr	r3, [pc, #292]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005074:	e001      	b.n	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4944      	ldr	r1, [pc, #272]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005082:	428b      	cmp	r3, r1
 8005084:	d101      	bne.n	800508a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005086:	4b44      	ldr	r3, [pc, #272]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005088:	e001      	b.n	800508e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800508a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800508e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005092:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005094:	2300      	movs	r3, #0
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f043 0204 	orr.w	r2, r3, #4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fe4a 	bl	8004d50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050bc:	e089      	b.n	80051d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d107      	bne.n	80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f8be 	bl	8005254 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d107      	bne.n	80050f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8fd 	bl	80052ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d12f      	bne.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02a      	beq.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005114:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d101      	bne.n	8005124 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005122:	e001      	b.n	8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4919      	ldr	r1, [pc, #100]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005130:	428b      	cmp	r3, r1
 8005132:	d101      	bne.n	8005138 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005136:	e001      	b.n	800513c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800513c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005140:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f043 0202 	orr.w	r2, r3, #2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fdfa 	bl	8004d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b08      	cmp	r3, #8
 8005164:	d136      	bne.n	80051d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d031      	beq.n	80051d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a07      	ldr	r2, [pc, #28]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d101      	bne.n	800517e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800517a:	4b07      	ldr	r3, [pc, #28]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800517c:	e001      	b.n	8005182 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800517e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4902      	ldr	r1, [pc, #8]	; (8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800518a:	428b      	cmp	r3, r1
 800518c:	d106      	bne.n	800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800518e:	4b02      	ldr	r3, [pc, #8]	; (8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005190:	e006      	b.n	80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005192:	bf00      	nop
 8005194:	40003800 	.word	0x40003800
 8005198:	40003400 	.word	0x40003400
 800519c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f043 0204 	orr.w	r2, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff fdc0 	bl	8004d50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051d0:	e000      	b.n	80051d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051d2:	bf00      	nop
}
 80051d4:	bf00      	nop
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c99      	adds	r1, r3, #2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6251      	str	r1, [r2, #36]	; 0x24
 8005202:	881a      	ldrh	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d113      	bne.n	800524a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005230:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffc9 	bl	80051dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	1c99      	adds	r1, r3, #2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6251      	str	r1, [r2, #36]	; 0x24
 8005266:	8819      	ldrh	r1, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <I2SEx_TxISR_I2SExt+0x90>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d101      	bne.n	8005276 <I2SEx_TxISR_I2SExt+0x22>
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <I2SEx_TxISR_I2SExt+0x94>)
 8005274:	e001      	b.n	800527a <I2SEx_TxISR_I2SExt+0x26>
 8005276:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527a:	460a      	mov	r2, r1
 800527c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d121      	bne.n	80052da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a12      	ldr	r2, [pc, #72]	; (80052e4 <I2SEx_TxISR_I2SExt+0x90>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <I2SEx_TxISR_I2SExt+0x50>
 80052a0:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <I2SEx_TxISR_I2SExt+0x94>)
 80052a2:	e001      	b.n	80052a8 <I2SEx_TxISR_I2SExt+0x54>
 80052a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	490d      	ldr	r1, [pc, #52]	; (80052e4 <I2SEx_TxISR_I2SExt+0x90>)
 80052b0:	428b      	cmp	r3, r1
 80052b2:	d101      	bne.n	80052b8 <I2SEx_TxISR_I2SExt+0x64>
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <I2SEx_TxISR_I2SExt+0x94>)
 80052b6:	e001      	b.n	80052bc <I2SEx_TxISR_I2SExt+0x68>
 80052b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ff81 	bl	80051dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40003800 	.word	0x40003800
 80052e8:	40003400 	.word	0x40003400

080052ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68d8      	ldr	r0, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	1c99      	adds	r1, r3, #2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005304:	b282      	uxth	r2, r0
 8005306:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d113      	bne.n	8005348 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800532e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ff4a 	bl	80051dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <I2SEx_RxISR_I2SExt+0x90>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <I2SEx_RxISR_I2SExt+0x16>
 8005362:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <I2SEx_RxISR_I2SExt+0x94>)
 8005364:	e001      	b.n	800536a <I2SEx_RxISR_I2SExt+0x1a>
 8005366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800536a:	68d8      	ldr	r0, [r3, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	1c99      	adds	r1, r3, #2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005376:	b282      	uxth	r2, r0
 8005378:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d121      	bne.n	80053d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <I2SEx_RxISR_I2SExt+0x90>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d101      	bne.n	80053a0 <I2SEx_RxISR_I2SExt+0x50>
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <I2SEx_RxISR_I2SExt+0x94>)
 800539e:	e001      	b.n	80053a4 <I2SEx_RxISR_I2SExt+0x54>
 80053a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	490d      	ldr	r1, [pc, #52]	; (80053e0 <I2SEx_RxISR_I2SExt+0x90>)
 80053ac:	428b      	cmp	r3, r1
 80053ae:	d101      	bne.n	80053b4 <I2SEx_RxISR_I2SExt+0x64>
 80053b0:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <I2SEx_RxISR_I2SExt+0x94>)
 80053b2:	e001      	b.n	80053b8 <I2SEx_RxISR_I2SExt+0x68>
 80053b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ff03 	bl	80051dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40003800 	.word	0x40003800
 80053e4:	40003400 	.word	0x40003400

080053e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e267      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d075      	beq.n	80054f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005406:	4b88      	ldr	r3, [pc, #544]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b04      	cmp	r3, #4
 8005410:	d00c      	beq.n	800542c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005412:	4b85      	ldr	r3, [pc, #532]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800541a:	2b08      	cmp	r3, #8
 800541c:	d112      	bne.n	8005444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541e:	4b82      	ldr	r3, [pc, #520]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542a:	d10b      	bne.n	8005444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	4b7e      	ldr	r3, [pc, #504]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d05b      	beq.n	80054f0 <HAL_RCC_OscConfig+0x108>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d157      	bne.n	80054f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e242      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d106      	bne.n	800545c <HAL_RCC_OscConfig+0x74>
 800544e:	4b76      	ldr	r3, [pc, #472]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a75      	ldr	r2, [pc, #468]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e01d      	b.n	8005498 <HAL_RCC_OscConfig+0xb0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005464:	d10c      	bne.n	8005480 <HAL_RCC_OscConfig+0x98>
 8005466:	4b70      	ldr	r3, [pc, #448]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a6f      	ldr	r2, [pc, #444]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 800546c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b6d      	ldr	r3, [pc, #436]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a6c      	ldr	r2, [pc, #432]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e00b      	b.n	8005498 <HAL_RCC_OscConfig+0xb0>
 8005480:	4b69      	ldr	r3, [pc, #420]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a68      	ldr	r2, [pc, #416]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	4b66      	ldr	r3, [pc, #408]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a65      	ldr	r2, [pc, #404]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d013      	beq.n	80054c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fc fb12 	bl	8001ac8 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a8:	f7fc fb0e 	bl	8001ac8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e207      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ba:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0xc0>
 80054c6:	e014      	b.n	80054f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc fafe 	bl	8001ac8 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d0:	f7fc fafa 	bl	8001ac8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	; 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e1f3      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e2:	4b51      	ldr	r3, [pc, #324]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0xe8>
 80054ee:	e000      	b.n	80054f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d063      	beq.n	80055c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054fe:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005512:	2b08      	cmp	r3, #8
 8005514:	d11c      	bne.n	8005550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005516:	4b44      	ldr	r3, [pc, #272]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d116      	bne.n	8005550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005522:	4b41      	ldr	r3, [pc, #260]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_RCC_OscConfig+0x152>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d001      	beq.n	800553a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e1c7      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553a:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4937      	ldr	r1, [pc, #220]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800554e:	e03a      	b.n	80055c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d020      	beq.n	800559a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005558:	4b34      	ldr	r3, [pc, #208]	; (800562c <HAL_RCC_OscConfig+0x244>)
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fc fab3 	bl	8001ac8 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005566:	f7fc faaf 	bl	8001ac8 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e1a8      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b28      	ldr	r3, [pc, #160]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4925      	ldr	r1, [pc, #148]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]
 8005598:	e015      	b.n	80055c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_RCC_OscConfig+0x244>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fc fa92 	bl	8001ac8 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a8:	f7fc fa8e 	bl	8001ac8 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e187      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d036      	beq.n	8005640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <HAL_RCC_OscConfig+0x248>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fc fa72 	bl	8001ac8 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e8:	f7fc fa6e 	bl	8001ac8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e167      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_OscConfig+0x240>)
 80055fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCC_OscConfig+0x200>
 8005606:	e01b      	b.n	8005640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <HAL_RCC_OscConfig+0x248>)
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560e:	f7fc fa5b 	bl	8001ac8 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005614:	e00e      	b.n	8005634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005616:	f7fc fa57 	bl	8001ac8 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d907      	bls.n	8005634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e150      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
 8005628:	40023800 	.word	0x40023800
 800562c:	42470000 	.word	0x42470000
 8005630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005634:	4b88      	ldr	r3, [pc, #544]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1ea      	bne.n	8005616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8097 	beq.w	800577c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005652:	4b81      	ldr	r3, [pc, #516]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	4b7d      	ldr	r3, [pc, #500]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	4a7c      	ldr	r2, [pc, #496]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566c:	6413      	str	r3, [r2, #64]	; 0x40
 800566e:	4b7a      	ldr	r3, [pc, #488]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	4b77      	ldr	r3, [pc, #476]	; (800585c <HAL_RCC_OscConfig+0x474>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d118      	bne.n	80056bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800568a:	4b74      	ldr	r3, [pc, #464]	; (800585c <HAL_RCC_OscConfig+0x474>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a73      	ldr	r2, [pc, #460]	; (800585c <HAL_RCC_OscConfig+0x474>)
 8005690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005696:	f7fc fa17 	bl	8001ac8 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569e:	f7fc fa13 	bl	8001ac8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e10c      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	4b6a      	ldr	r3, [pc, #424]	; (800585c <HAL_RCC_OscConfig+0x474>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d106      	bne.n	80056d2 <HAL_RCC_OscConfig+0x2ea>
 80056c4:	4b64      	ldr	r3, [pc, #400]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	4a63      	ldr	r2, [pc, #396]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	6713      	str	r3, [r2, #112]	; 0x70
 80056d0:	e01c      	b.n	800570c <HAL_RCC_OscConfig+0x324>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCC_OscConfig+0x30c>
 80056da:	4b5f      	ldr	r3, [pc, #380]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a5e      	ldr	r2, [pc, #376]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056e0:	f043 0304 	orr.w	r3, r3, #4
 80056e4:	6713      	str	r3, [r2, #112]	; 0x70
 80056e6:	4b5c      	ldr	r3, [pc, #368]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	4a5b      	ldr	r2, [pc, #364]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6713      	str	r3, [r2, #112]	; 0x70
 80056f2:	e00b      	b.n	800570c <HAL_RCC_OscConfig+0x324>
 80056f4:	4b58      	ldr	r3, [pc, #352]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a57      	ldr	r2, [pc, #348]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005700:	4b55      	ldr	r3, [pc, #340]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	4a54      	ldr	r2, [pc, #336]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005706:	f023 0304 	bic.w	r3, r3, #4
 800570a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005714:	f7fc f9d8 	bl	8001ac8 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fc f9d4 	bl	8001ac8 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0cb      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005732:	4b49      	ldr	r3, [pc, #292]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0ee      	beq.n	800571c <HAL_RCC_OscConfig+0x334>
 800573e:	e014      	b.n	800576a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005740:	f7fc f9c2 	bl	8001ac8 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005746:	e00a      	b.n	800575e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fc f9be 	bl	8001ac8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e0b5      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800575e:	4b3e      	ldr	r3, [pc, #248]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ee      	bne.n	8005748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005770:	4b39      	ldr	r3, [pc, #228]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	4a38      	ldr	r2, [pc, #224]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80a1 	beq.w	80058c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005786:	4b34      	ldr	r3, [pc, #208]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	2b08      	cmp	r3, #8
 8005790:	d05c      	beq.n	800584c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d141      	bne.n	800581e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579a:	4b31      	ldr	r3, [pc, #196]	; (8005860 <HAL_RCC_OscConfig+0x478>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fc f992 	bl	8001ac8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fc f98e 	bl	8001ac8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e087      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	4b27      	ldr	r3, [pc, #156]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	019b      	lsls	r3, r3, #6
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	3b01      	subs	r3, #1
 80057e0:	041b      	lsls	r3, r3, #16
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	061b      	lsls	r3, r3, #24
 80057ea:	491b      	ldr	r1, [pc, #108]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f0:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <HAL_RCC_OscConfig+0x478>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f6:	f7fc f967 	bl	8001ac8 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fe:	f7fc f963 	bl	8001ac8 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e05c      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x416>
 800581c:	e054      	b.n	80058c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800581e:	4b10      	ldr	r3, [pc, #64]	; (8005860 <HAL_RCC_OscConfig+0x478>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fc f950 	bl	8001ac8 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582c:	f7fc f94c 	bl	8001ac8 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e045      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_RCC_OscConfig+0x470>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0x444>
 800584a:	e03d      	b.n	80058c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d107      	bne.n	8005864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e038      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
 8005858:	40023800 	.word	0x40023800
 800585c:	40007000 	.word	0x40007000
 8005860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005864:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <HAL_RCC_OscConfig+0x4ec>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d028      	beq.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d121      	bne.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d11a      	bne.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005894:	4013      	ands	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800589a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800589c:	4293      	cmp	r3, r2
 800589e:	d111      	bne.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	3b01      	subs	r3, #1
 80058ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d107      	bne.n	80058c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40023800 	.word	0x40023800

080058d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0cc      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ec:	4b68      	ldr	r3, [pc, #416]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d90c      	bls.n	8005914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fa:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b63      	ldr	r3, [pc, #396]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0b8      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800592c:	4b59      	ldr	r3, [pc, #356]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005944:	4b53      	ldr	r3, [pc, #332]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4a52      	ldr	r2, [pc, #328]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800594e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005950:	4b50      	ldr	r3, [pc, #320]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	494d      	ldr	r1, [pc, #308]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d044      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d119      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e07f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d003      	beq.n	8005996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005992:	2b03      	cmp	r3, #3
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005996:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e06f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	4b3b      	ldr	r3, [pc, #236]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e067      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b6:	4b37      	ldr	r3, [pc, #220]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f023 0203 	bic.w	r2, r3, #3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4934      	ldr	r1, [pc, #208]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c8:	f7fc f87e 	bl	8001ac8 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7fc f87a 	bl	8001ac8 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e04f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 020c 	and.w	r2, r3, #12
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1eb      	bne.n	80059d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d20c      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a06:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e032      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4916      	ldr	r1, [pc, #88]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	490e      	ldr	r1, [pc, #56]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a5e:	f000 f821 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490a      	ldr	r1, [pc, #40]	; (8005a98 <HAL_RCC_ClockConfig+0x1c0>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fb ffde 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40023c00 	.word	0x40023c00
 8005a94:	40023800 	.word	0x40023800
 8005a98:	080098f4 	.word	0x080098f4
 8005a9c:	20000000 	.word	0x20000000
 8005aa0:	20000004 	.word	0x20000004

08005aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa8:	b094      	sub	sp, #80	; 0x50
 8005aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005abc:	4b79      	ldr	r3, [pc, #484]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d00d      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	f200 80e1 	bhi.w	8005c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0x3a>
 8005ad6:	e0db      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad8:	4b73      	ldr	r3, [pc, #460]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ada:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005adc:	e0db      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ade:	4b73      	ldr	r3, [pc, #460]	; (8005cac <HAL_RCC_GetSysClockFreq+0x208>)
 8005ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ae2:	e0d8      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ae4:	4b6f      	ldr	r3, [pc, #444]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aee:	4b6d      	ldr	r3, [pc, #436]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d063      	beq.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	4b6a      	ldr	r3, [pc, #424]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	2200      	movs	r2, #0
 8005b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
 8005b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b16:	4622      	mov	r2, r4
 8005b18:	462b      	mov	r3, r5
 8005b1a:	f04f 0000 	mov.w	r0, #0
 8005b1e:	f04f 0100 	mov.w	r1, #0
 8005b22:	0159      	lsls	r1, r3, #5
 8005b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b28:	0150      	lsls	r0, r2, #5
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4621      	mov	r1, r4
 8005b30:	1a51      	subs	r1, r2, r1
 8005b32:	6139      	str	r1, [r7, #16]
 8005b34:	4629      	mov	r1, r5
 8005b36:	eb63 0301 	sbc.w	r3, r3, r1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b48:	4659      	mov	r1, fp
 8005b4a:	018b      	lsls	r3, r1, #6
 8005b4c:	4651      	mov	r1, sl
 8005b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b52:	4651      	mov	r1, sl
 8005b54:	018a      	lsls	r2, r1, #6
 8005b56:	4651      	mov	r1, sl
 8005b58:	ebb2 0801 	subs.w	r8, r2, r1
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b76:	4690      	mov	r8, r2
 8005b78:	4699      	mov	r9, r3
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	eb18 0303 	adds.w	r3, r8, r3
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	462b      	mov	r3, r5
 8005b84:	eb49 0303 	adc.w	r3, r9, r3
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b96:	4629      	mov	r1, r5
 8005b98:	024b      	lsls	r3, r1, #9
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	024a      	lsls	r2, r1, #9
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005baa:	2200      	movs	r2, #0
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bb4:	f7fa fe3e 	bl	8000834 <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc0:	e058      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc2:	4b38      	ldr	r3, [pc, #224]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	4611      	mov	r1, r2
 8005bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bd2:	623b      	str	r3, [r7, #32]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
 8005be0:	f04f 0000 	mov.w	r0, #0
 8005be4:	f04f 0100 	mov.w	r1, #0
 8005be8:	0159      	lsls	r1, r3, #5
 8005bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bee:	0150      	lsls	r0, r2, #5
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4641      	mov	r1, r8
 8005bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c14:	ebb2 040a 	subs.w	r4, r2, sl
 8005c18:	eb63 050b 	sbc.w	r5, r3, fp
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	00eb      	lsls	r3, r5, #3
 8005c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c2a:	00e2      	lsls	r2, r4, #3
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	461d      	mov	r5, r3
 8005c30:	4643      	mov	r3, r8
 8005c32:	18e3      	adds	r3, r4, r3
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	464b      	mov	r3, r9
 8005c38:	eb45 0303 	adc.w	r3, r5, r3
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	028b      	lsls	r3, r1, #10
 8005c4e:	4621      	mov	r1, r4
 8005c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c54:	4621      	mov	r1, r4
 8005c56:	028a      	lsls	r2, r1, #10
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	61fa      	str	r2, [r7, #28]
 8005c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c68:	f7fa fde4 	bl	8000834 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4613      	mov	r3, r2
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c8e:	e002      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3750      	adds	r7, #80	; 0x50
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	007a1200 	.word	0x007a1200

08005cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000000 	.word	0x20000000

08005cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ccc:	f7ff fff0 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	0a9b      	lsrs	r3, r3, #10
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	; (8005cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	08009904 	.word	0x08009904

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d035      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d18:	4b62      	ldr	r3, [pc, #392]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1e:	f7fb fed3 	bl	8001ac8 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d24:	e008      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d26:	f7fb fecf 	bl	8001ac8 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e0b0      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d38:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f0      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	019a      	lsls	r2, r3, #6
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	071b      	lsls	r3, r3, #28
 8005d50:	4955      	ldr	r1, [pc, #340]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d58:	4b52      	ldr	r3, [pc, #328]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d5e:	f7fb feb3 	bl	8001ac8 <HAL_GetTick>
 8005d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d64:	e008      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d66:	f7fb feaf 	bl	8001ac8 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e090      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d78:	4b4b      	ldr	r3, [pc, #300]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f0      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8083 	beq.w	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	4b44      	ldr	r3, [pc, #272]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	4a43      	ldr	r2, [pc, #268]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6413      	str	r3, [r2, #64]	; 0x40
 8005da2:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a3e      	ldr	r2, [pc, #248]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dba:	f7fb fe85 	bl	8001ac8 <HAL_GetTick>
 8005dbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dc2:	f7fb fe81 	bl	8001ac8 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e062      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dd4:	4b35      	ldr	r3, [pc, #212]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de0:	4b31      	ldr	r3, [pc, #196]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02f      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d028      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e0e:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e14:	4a24      	ldr	r2, [pc, #144]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e1a:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d114      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fb fe4f 	bl	8001ac8 <HAL_GetTick>
 8005e2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2e:	f7fb fe4b 	bl	8001ac8 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e02a      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e44:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0ee      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5c:	d10d      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	490d      	ldr	r1, [pc, #52]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	608b      	str	r3, [r1, #8]
 8005e78:	e005      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e84:	6093      	str	r3, [r2, #8]
 8005e86:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e92:	4905      	ldr	r1, [pc, #20]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	42470068 	.word	0x42470068
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	42470e40 	.word	0x42470e40

08005eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d13e      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005ed2:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d12f      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eea:	617b      	str	r3, [r7, #20]
          break;
 8005eec:	e02f      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005eee:	4b1c      	ldr	r3, [pc, #112]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005efa:	d108      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005efc:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f04:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	e007      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f0e:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f16:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f1e:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f24:	099b      	lsrs	r3, r3, #6
 8005f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	fb02 f303 	mul.w	r3, r2, r3
 8005f30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f38:	0f1b      	lsrs	r3, r3, #28
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	617b      	str	r3, [r7, #20]
          break;
 8005f46:	e002      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
          break;
 8005f4c:	bf00      	nop
        }
      }
      break;
 8005f4e:	bf00      	nop
    }
  }
  return frequency;
 8005f50:	697b      	ldr	r3, [r7, #20]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40023800 	.word	0x40023800
 8005f64:	00bb8000 	.word	0x00bb8000
 8005f68:	007a1200 	.word	0x007a1200
 8005f6c:	00f42400 	.word	0x00f42400

08005f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e07b      	b.n	800607a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d108      	bne.n	8005f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f92:	d009      	beq.n	8005fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	61da      	str	r2, [r3, #28]
 8005f9a:	e005      	b.n	8005fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fb fc2c 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	ea42 0103 	orr.w	r1, r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	0c1b      	lsrs	r3, r3, #16
 8006046:	f003 0104 	and.w	r1, r3, #4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	f003 0210 	and.w	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006082:	b084      	sub	sp, #16
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	f107 001c 	add.w	r0, r7, #28
 8006090:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2b01      	cmp	r3, #1
 8006098:	d122      	bne.n	80060e0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d105      	bne.n	80060d4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f9bf 	bl	8006458 <USB_CoreReset>
 80060da:	4603      	mov	r3, r0
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	e01a      	b.n	8006116 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f9b3 	bl	8006458 <USB_CoreReset>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38
 8006108:	e005      	b.n	8006116 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	2b01      	cmp	r3, #1
 800611a:	d10b      	bne.n	8006134 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f043 0206 	orr.w	r2, r3, #6
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006140:	b004      	add	sp, #16
 8006142:	4770      	bx	lr

08006144 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d115      	bne.n	80061d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061b6:	2001      	movs	r0, #1
 80061b8:	f7fb fc92 	bl	8001ae0 <HAL_Delay>
      ms++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f939 	bl	800643a <USB_GetMode>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d01e      	beq.n	800620c <USB_SetCurrentMode+0x84>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b31      	cmp	r3, #49	; 0x31
 80061d2:	d9f0      	bls.n	80061b6 <USB_SetCurrentMode+0x2e>
 80061d4:	e01a      	b.n	800620c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d115      	bne.n	8006208 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061e8:	2001      	movs	r0, #1
 80061ea:	f7fb fc79 	bl	8001ae0 <HAL_Delay>
      ms++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f920 	bl	800643a <USB_GetMode>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <USB_SetCurrentMode+0x84>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b31      	cmp	r3, #49	; 0x31
 8006204:	d9f0      	bls.n	80061e8 <USB_SetCurrentMode+0x60>
 8006206:	e001      	b.n	800620c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e005      	b.n	8006218 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b32      	cmp	r3, #50	; 0x32
 8006210:	d101      	bne.n	8006216 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <USB_FlushTxFifo+0x64>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e01b      	b.n	8006278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	daf2      	bge.n	800622e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	019b      	lsls	r3, r3, #6
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <USB_FlushTxFifo+0x64>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d901      	bls.n	800626a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e006      	b.n	8006278 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d0f0      	beq.n	8006258 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	00030d40 	.word	0x00030d40

08006288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <USB_FlushRxFifo+0x5c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e018      	b.n	80062d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	daf2      	bge.n	8006294 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2210      	movs	r2, #16
 80062b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <USB_FlushRxFifo+0x5c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e006      	b.n	80062d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d0f0      	beq.n	80062b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	00030d40 	.word	0x00030d40

080062e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b089      	sub	sp, #36	; 0x24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4611      	mov	r1, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	460b      	mov	r3, r1
 80062f8:	71fb      	strb	r3, [r7, #7]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006306:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d123      	bne.n	8006356 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800630e:	88bb      	ldrh	r3, [r7, #4]
 8006310:	3303      	adds	r3, #3
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e018      	b.n	800634e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	031a      	lsls	r2, r3, #12
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4413      	add	r3, r2
 8006324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006328:	461a      	mov	r2, r3
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	3301      	adds	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	3301      	adds	r3, #1
 800633a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3301      	adds	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	3301      	adds	r3, #1
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	d3e2      	bcc.n	800631c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3724      	adds	r7, #36	; 0x24
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006364:	b480      	push	{r7}
 8006366:	b08b      	sub	sp, #44	; 0x2c
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	089b      	lsrs	r3, r3, #2
 800637e:	b29b      	uxth	r3, r3
 8006380:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800638a:	2300      	movs	r3, #0
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	e014      	b.n	80063ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	601a      	str	r2, [r3, #0]
    pDest++;
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	3301      	adds	r3, #1
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	3301      	adds	r3, #1
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	3301      	adds	r3, #1
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	3301      	adds	r3, #1
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	3301      	adds	r3, #1
 80063b8:	623b      	str	r3, [r7, #32]
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d3e6      	bcc.n	8006390 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063c2:	8bfb      	ldrh	r3, [r7, #30]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01e      	beq.n	8006406 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d2:	461a      	mov	r2, r3
 80063d4:	f107 0310 	add.w	r3, r7, #16
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	701a      	strb	r2, [r3, #0]
      i++;
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	3301      	adds	r3, #1
 80063f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	3301      	adds	r3, #1
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80063fa:	8bfb      	ldrh	r3, [r7, #30]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006400:	8bfb      	ldrh	r3, [r7, #30]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1ea      	bne.n	80063dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006408:	4618      	mov	r0, r3
 800640a:	372c      	adds	r7, #44	; 0x2c
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800642c:	68fb      	ldr	r3, [r7, #12]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0301 	and.w	r3, r3, #1
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4a13      	ldr	r2, [pc, #76]	; (80064bc <USB_CoreReset+0x64>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e01b      	b.n	80064ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	daf2      	bge.n	8006464 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f043 0201 	orr.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <USB_CoreReset+0x64>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e006      	b.n	80064ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d0f0      	beq.n	800648e <USB_CoreReset+0x36>

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	00030d40 	.word	0x00030d40

080064c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064c0:	b084      	sub	sp, #16
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d018      	beq.n	8006548 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d10a      	bne.n	8006532 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800652a:	f043 0304 	orr.w	r3, r3, #4
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e014      	b.n	800655c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006540:	f023 0304 	bic.w	r3, r3, #4
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e009      	b.n	800655c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006556:	f023 0304 	bic.w	r3, r3, #4
 800655a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800655c:	2110      	movs	r1, #16
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fe5e 	bl	8006220 <USB_FlushTxFifo>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fe8a 	bl	8006288 <USB_FlushRxFifo>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800657e:	2300      	movs	r3, #0
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e015      	b.n	80065b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	461a      	mov	r2, r3
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	461a      	mov	r2, r3
 80065a6:	2300      	movs	r3, #0
 80065a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	3301      	adds	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d3e5      	bcc.n	8006584 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f04f 32ff 	mov.w	r2, #4294967295
 80065c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a13      	ldr	r2, [pc, #76]	; (800662c <USB_HostInit+0x16c>)
 80065de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a13      	ldr	r2, [pc, #76]	; (8006630 <USB_HostInit+0x170>)
 80065e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80065e8:	e009      	b.n	80065fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a10      	ldr	r2, [pc, #64]	; (8006634 <USB_HostInit+0x174>)
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a0f      	ldr	r2, [pc, #60]	; (8006638 <USB_HostInit+0x178>)
 80065fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	2b00      	cmp	r3, #0
 8006602:	d105      	bne.n	8006610 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	f043 0210 	orr.w	r2, r3, #16
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <USB_HostInit+0x17c>)
 8006616:	4313      	orrs	r3, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800661c:	7dfb      	ldrb	r3, [r7, #23]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006628:	b004      	add	sp, #16
 800662a:	4770      	bx	lr
 800662c:	01000200 	.word	0x01000200
 8006630:	00e00300 	.word	0x00e00300
 8006634:	00600080 	.word	0x00600080
 8006638:	004000e0 	.word	0x004000e0
 800663c:	a3200008 	.word	0xa3200008

08006640 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006678:	4313      	orrs	r3, r2
 800667a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d107      	bne.n	8006692 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006688:	461a      	mov	r2, r3
 800668a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800668e:	6053      	str	r3, [r2, #4]
 8006690:	e009      	b.n	80066a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d106      	bne.n	80066a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669e:	461a      	mov	r2, r3
 80066a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80066a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066e4:	2064      	movs	r0, #100	; 0x64
 80066e6:	f7fb f9fb 	bl	8001ae0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066f8:	200a      	movs	r0, #10
 80066fa:	f7fb f9f1 	bl	8001ae0 <HAL_Delay>

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800672c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <USB_DriveVbus+0x44>
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d106      	bne.n	800674c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800674a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006756:	d109      	bne.n	800676c <USB_DriveVbus+0x64>
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800676a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	0c5b      	lsrs	r3, r3, #17
 8006798:	f003 0303 	and.w	r3, r3, #3
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	b29b      	uxth	r3, r3
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	4608      	mov	r0, r1
 80067d6:	4611      	mov	r1, r2
 80067d8:	461a      	mov	r2, r3
 80067da:	4603      	mov	r3, r0
 80067dc:	70fb      	strb	r3, [r7, #3]
 80067de:	460b      	mov	r3, r1
 80067e0:	70bb      	strb	r3, [r7, #2]
 80067e2:	4613      	mov	r3, r2
 80067e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	461a      	mov	r2, r3
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006802:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006806:	2b03      	cmp	r3, #3
 8006808:	d87e      	bhi.n	8006908 <USB_HC_Init+0x13c>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <USB_HC_Init+0x44>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006821 	.word	0x08006821
 8006814:	080068cb 	.word	0x080068cb
 8006818:	08006821 	.word	0x08006821
 800681c:	0800688d 	.word	0x0800688d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682c:	461a      	mov	r2, r3
 800682e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006832:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006834:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da10      	bge.n	800685e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	78fa      	ldrb	r2, [r7, #3]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	440a      	add	r2, r1
 8006852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800685c:	e057      	b.n	800690e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d051      	beq.n	800690e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	440a      	add	r2, r1
 8006880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006884:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006888:	60d3      	str	r3, [r2, #12]
      break;
 800688a:	e040      	b.n	800690e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006898:	461a      	mov	r2, r3
 800689a:	f240 639d 	movw	r3, #1693	; 0x69d
 800689e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	da34      	bge.n	8006912 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068c8:	e023      	b.n	8006912 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d6:	461a      	mov	r2, r3
 80068d8:	f240 2325 	movw	r3, #549	; 0x225
 80068dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da17      	bge.n	8006916 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006900:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006904:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006906:	e006      	b.n	8006916 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	77fb      	strb	r3, [r7, #31]
      break;
 800690c:	e004      	b.n	8006918 <USB_HC_Init+0x14c>
      break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <USB_HC_Init+0x14c>
      break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <USB_HC_Init+0x14c>
      break;
 8006916:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	440a      	add	r2, r1
 800692e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006932:	f043 0302 	orr.w	r3, r3, #2
 8006936:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	2101      	movs	r1, #1
 8006948:	fa01 f303 	lsl.w	r3, r1, r3
 800694c:	6939      	ldr	r1, [r7, #16]
 800694e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006952:	4313      	orrs	r3, r2
 8006954:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006962:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006966:	2b00      	cmp	r3, #0
 8006968:	da03      	bge.n	8006972 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800696a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	e001      	b.n	8006976 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff feff 	bl	800677a <USB_GetHostSpeed>
 800697c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800697e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006982:	2b02      	cmp	r3, #2
 8006984:	d106      	bne.n	8006994 <USB_HC_Init+0x1c8>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d003      	beq.n	8006994 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800698c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e001      	b.n	8006998 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006998:	787b      	ldrb	r3, [r7, #1]
 800699a:	059b      	lsls	r3, r3, #22
 800699c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069a0:	78bb      	ldrb	r3, [r7, #2]
 80069a2:	02db      	lsls	r3, r3, #11
 80069a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069ae:	049b      	lsls	r3, r3, #18
 80069b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80069b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	0159      	lsls	r1, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	440b      	add	r3, r1
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069d4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80069d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d003      	beq.n	80069e6 <USB_HC_Init+0x21a>
 80069de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10f      	bne.n	8006a06 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a04:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08c      	sub	sp, #48	; 0x30
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a2c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d02d      	beq.n	8006a96 <USB_HC_StartXfer+0x86>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	791b      	ldrb	r3, [r3, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d129      	bne.n	8006a96 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d117      	bne.n	8006a78 <USB_HC_StartXfer+0x68>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	79db      	ldrb	r3, [r3, #7]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <USB_HC_StartXfer+0x48>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	79db      	ldrb	r3, [r3, #7]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d10f      	bne.n	8006a78 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10b      	bne.n	8006a96 <USB_HC_StartXfer+0x86>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	795b      	ldrb	r3, [r3, #5]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d107      	bne.n	8006a96 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fa0f 	bl	8006eb0 <USB_DoPing>
      return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e0f8      	b.n	8006c88 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d018      	beq.n	8006ad0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	8912      	ldrh	r2, [r2, #8]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	8912      	ldrh	r2, [r2, #8]
 8006aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006ab4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ab6:	8b7b      	ldrh	r3, [r7, #26]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d90b      	bls.n	8006ad4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006abc:	8b7b      	ldrh	r3, [r7, #26]
 8006abe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	8912      	ldrh	r2, [r2, #8]
 8006ac6:	fb03 f202 	mul.w	r2, r3, r2
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	611a      	str	r2, [r3, #16]
 8006ace:	e001      	b.n	8006ad4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	78db      	ldrb	r3, [r3, #3]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006adc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	8912      	ldrh	r2, [r2, #8]
 8006ae2:	fb03 f202 	mul.w	r2, r3, r2
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	611a      	str	r2, [r3, #16]
 8006aea:	e003      	b.n	8006af4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006afc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006afe:	04d9      	lsls	r1, r3, #19
 8006b00:	4b63      	ldr	r3, [pc, #396]	; (8006c90 <USB_HC_StartXfer+0x280>)
 8006b02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	7a9b      	ldrb	r3, [r3, #10]
 8006b0a:	075b      	lsls	r3, r3, #29
 8006b0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b10:	69f9      	ldr	r1, [r7, #28]
 8006b12:	0148      	lsls	r0, r1, #5
 8006b14:	6a39      	ldr	r1, [r7, #32]
 8006b16:	4401      	add	r1, r0
 8006b18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	68d9      	ldr	r1, [r3, #12]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	460a      	mov	r2, r1
 8006b38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bf0c      	ite	eq
 8006b4a:	2301      	moveq	r3, #1
 8006b4c:	2300      	movne	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	7e7b      	ldrb	r3, [r7, #25]
 8006b82:	075b      	lsls	r3, r3, #29
 8006b84:	69f9      	ldr	r1, [r7, #28]
 8006b86:	0148      	lsls	r0, r1, #5
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	4401      	add	r1, r0
 8006b8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006b90:	4313      	orrs	r3, r2
 8006b92:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006baa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	78db      	ldrb	r3, [r3, #3]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	e003      	b.n	8006bc6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bc4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bcc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	461a      	mov	r2, r3
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e04e      	b.n	8006c88 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	78db      	ldrb	r3, [r3, #3]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d149      	bne.n	8006c86 <USB_HC_StartXfer+0x276>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d045      	beq.n	8006c86 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	79db      	ldrb	r3, [r3, #7]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d830      	bhi.n	8006c64 <USB_HC_StartXfer+0x254>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <USB_HC_StartXfer+0x1f8>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c3d 	.word	0x08006c3d
 8006c10:	08006c19 	.word	0x08006c19
 8006c14:	08006c3d 	.word	0x08006c3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	3303      	adds	r3, #3
 8006c1e:	089b      	lsrs	r3, r3, #2
 8006c20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c22:	8afa      	ldrh	r2, [r7, #22]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d91c      	bls.n	8006c68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f043 0220 	orr.w	r2, r3, #32
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c3a:	e015      	b.n	8006c68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	3303      	adds	r3, #3
 8006c42:	089b      	lsrs	r3, r3, #2
 8006c44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c46:	8afa      	ldrh	r2, [r7, #22]
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d90a      	bls.n	8006c6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c62:	e003      	b.n	8006c6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <USB_HC_StartXfer+0x25e>
        break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <USB_HC_StartXfer+0x25e>
        break;
 8006c6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	68d9      	ldr	r1, [r3, #12]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	785a      	ldrb	r2, [r3, #1]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	9000      	str	r0, [sp, #0]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff fb31 	bl	80062e8 <USB_WritePacket>
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3728      	adds	r7, #40	; 0x28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	1ff80000 	.word	0x1ff80000

08006c94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	b29b      	uxth	r3, r3
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b089      	sub	sp, #36	; 0x24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0c9b      	lsrs	r3, r3, #18
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	0fdb      	lsrs	r3, r3, #31
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d104      	bne.n	8006d10 <USB_HC_Halt+0x5a>
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e0c8      	b.n	8006ea2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <USB_HC_Halt+0x66>
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d163      	bne.n	8006de4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 80ab 	bne.w	8006ea0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d133      	bne.n	8006dbe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006da2:	d81d      	bhi.n	8006de0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dba:	d0ec      	beq.n	8006d96 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dbc:	e070      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dde:	e05f      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
            break;
 8006de0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006de2:	e05d      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d133      	bne.n	8006e7c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e52:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e60:	d81d      	bhi.n	8006e9e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e78:	d0ec      	beq.n	8006e54 <USB_HC_Halt+0x19e>
 8006e7a:	e011      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e000      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
          break;
 8006e9e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3724      	adds	r7, #36	; 0x24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
	...

08006eb0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	04da      	lsls	r2, r3, #19
 8006ecc:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <USB_DoPing+0x74>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	1ff80000 	.word	0x1ff80000

08006f28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff f912 	bl	8006166 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f42:	2110      	movs	r1, #16
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff f96b 	bl	8006220 <USB_FlushTxFifo>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff f997 	bl	8006288 <USB_FlushRxFifo>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	e01f      	b.n	8006faa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d9dc      	bls.n	8006f6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	e034      	b.n	8007020 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fcc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fdc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	461a      	mov	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ffc:	d80c      	bhi.n	8007018 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007014:	d0ec      	beq.n	8006ff0 <USB_StopHost+0xc8>
 8007016:	e000      	b.n	800701a <USB_StopHost+0xf2>
        break;
 8007018:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3301      	adds	r3, #1
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b0f      	cmp	r3, #15
 8007024:	d9c7      	bls.n	8006fb6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702c:	461a      	mov	r2, r3
 800702e:	f04f 33ff 	mov.w	r3, #4294967295
 8007032:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f04f 32ff 	mov.w	r2, #4294967295
 800703a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff f881 	bl	8006144 <USB_EnableGlobalInt>

  return ret;
 8007042:	7ffb      	ldrb	r3, [r7, #31]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b089      	sub	sp, #36	; 0x24
 8007050:	af04      	add	r7, sp, #16
 8007052:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007054:	2301      	movs	r3, #1
 8007056:	2202      	movs	r2, #2
 8007058:	2102      	movs	r1, #2
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fc66 	bl	800792c <USBH_FindInterface>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2bff      	cmp	r3, #255	; 0xff
 8007068:	d002      	beq.n	8007070 <USBH_CDC_InterfaceInit+0x24>
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d901      	bls.n	8007074 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007070:	2302      	movs	r3, #2
 8007072:	e13d      	b.n	80072f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fc3b 	bl	80078f4 <USBH_SelectInterface>
 800707e:	4603      	mov	r3, r0
 8007080:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007088:	2302      	movs	r3, #2
 800708a:	e131      	b.n	80072f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007092:	2050      	movs	r0, #80	; 0x50
 8007094:	f002 fad2 	bl	800963c <malloc>
 8007098:	4603      	mov	r3, r0
 800709a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80070ac:	2302      	movs	r3, #2
 80070ae:	e11f      	b.n	80072f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80070b0:	2250      	movs	r2, #80	; 0x50
 80070b2:	2100      	movs	r1, #0
 80070b4:	68b8      	ldr	r0, [r7, #8]
 80070b6:	f002 fb7d 	bl	80097b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	211a      	movs	r1, #26
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	4413      	add	r3, r2
 80070c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b25b      	sxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da15      	bge.n	80070fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	211a      	movs	r1, #26
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	4413      	add	r3, r2
 80070de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	211a      	movs	r1, #26
 80070ee:	fb01 f303 	mul.w	r3, r1, r3
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070f8:	881a      	ldrh	r2, [r3, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 ff2e 	bl	8008f66 <USBH_AllocPipe>
 800710a:	4603      	mov	r3, r0
 800710c:	461a      	mov	r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	7819      	ldrb	r1, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	7858      	ldrb	r0, [r3, #1]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	8952      	ldrh	r2, [r2, #10]
 800712a:	9202      	str	r2, [sp, #8]
 800712c:	2203      	movs	r2, #3
 800712e:	9201      	str	r2, [sp, #4]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	4623      	mov	r3, r4
 8007134:	4602      	mov	r2, r0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fee6 	bl	8008f08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2200      	movs	r2, #0
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f002 f9f5 	bl	8009534 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800714a:	2300      	movs	r3, #0
 800714c:	2200      	movs	r2, #0
 800714e:	210a      	movs	r1, #10
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fbeb 	bl	800792c <USBH_FindInterface>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2bff      	cmp	r3, #255	; 0xff
 800715e:	d002      	beq.n	8007166 <USBH_CDC_InterfaceInit+0x11a>
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d901      	bls.n	800716a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007166:	2302      	movs	r3, #2
 8007168:	e0c2      	b.n	80072f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	211a      	movs	r1, #26
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	4413      	add	r3, r2
 8007176:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b25b      	sxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	da16      	bge.n	80071b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	211a      	movs	r1, #26
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	211a      	movs	r1, #26
 800719e:	fb01 f303 	mul.w	r3, r1, r3
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	835a      	strh	r2, [r3, #26]
 80071ae:	e015      	b.n	80071dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	211a      	movs	r1, #26
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	211a      	movs	r1, #26
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071d6:	881a      	ldrh	r2, [r3, #0]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	211a      	movs	r1, #26
 80071e2:	fb01 f303 	mul.w	r3, r1, r3
 80071e6:	4413      	add	r3, r2
 80071e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da16      	bge.n	8007222 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	211a      	movs	r1, #26
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	4413      	add	r3, r2
 8007200:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007204:	781a      	ldrb	r2, [r3, #0]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	211a      	movs	r1, #26
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	4413      	add	r3, r2
 8007216:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	835a      	strh	r2, [r3, #26]
 8007220:	e015      	b.n	800724e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	211a      	movs	r1, #26
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	4413      	add	r3, r2
 800722e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	211a      	movs	r1, #26
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	4413      	add	r3, r2
 8007244:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	7b9b      	ldrb	r3, [r3, #14]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 fe86 	bl	8008f66 <USBH_AllocPipe>
 800725a:	4603      	mov	r3, r0
 800725c:	461a      	mov	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	7bdb      	ldrb	r3, [r3, #15]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fe7c 	bl	8008f66 <USBH_AllocPipe>
 800726e:	4603      	mov	r3, r0
 8007270:	461a      	mov	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	7b59      	ldrb	r1, [r3, #13]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7b98      	ldrb	r0, [r3, #14]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	8b12      	ldrh	r2, [r2, #24]
 800728e:	9202      	str	r2, [sp, #8]
 8007290:	2202      	movs	r2, #2
 8007292:	9201      	str	r2, [sp, #4]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	4623      	mov	r3, r4
 8007298:	4602      	mov	r2, r0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fe34 	bl	8008f08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	7b19      	ldrb	r1, [r3, #12]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	7bd8      	ldrb	r0, [r3, #15]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	8b52      	ldrh	r2, [r2, #26]
 80072b8:	9202      	str	r2, [sp, #8]
 80072ba:	2202      	movs	r2, #2
 80072bc:	9201      	str	r2, [sp, #4]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4623      	mov	r3, r4
 80072c2:	4602      	mov	r2, r0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fe1f 	bl	8008f08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	7b5b      	ldrb	r3, [r3, #13]
 80072d6:	2200      	movs	r2, #0
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f002 f92a 	bl	8009534 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	7b1b      	ldrb	r3, [r3, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f002 f923 	bl	8009534 <USBH_LL_SetToggle>

  return USBH_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd90      	pop	{r4, r7, pc}

080072f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00e      	beq.n	8007330 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fe14 	bl	8008f46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fe3f 	bl	8008fa8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	7b1b      	ldrb	r3, [r3, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00e      	beq.n	8007356 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	7b1b      	ldrb	r3, [r3, #12]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fe01 	bl	8008f46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	7b1b      	ldrb	r3, [r3, #12]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 fe2c 	bl	8008fa8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	7b5b      	ldrb	r3, [r3, #13]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	7b5b      	ldrb	r3, [r3, #13]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fdee 	bl	8008f46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	7b5b      	ldrb	r3, [r3, #13]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fe19 	bl	8008fa8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	4618      	mov	r0, r3
 8007392:	f002 f95b 	bl	800964c <free>
    phost->pActiveClass->pData = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739c:	2200      	movs	r2, #0
 800739e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3340      	adds	r3, #64	; 0x40
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f8b1 	bl	800752a <GetLineCoding>
 80073c8:	4603      	mov	r3, r0
 80073ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073d8:	2102      	movs	r1, #2
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80073de:	7afb      	ldrb	r3, [r7, #11]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007408:	2b04      	cmp	r3, #4
 800740a:	d877      	bhi.n	80074fc <USBH_CDC_Process+0x114>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <USBH_CDC_Process+0x2c>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007429 	.word	0x08007429
 8007418:	0800742f 	.word	0x0800742f
 800741c:	0800745f 	.word	0x0800745f
 8007420:	080074d3 	.word	0x080074d3
 8007424:	080074e1 	.word	0x080074e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
      break;
 800742c:	e06d      	b.n	800750a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f897 	bl	8007568 <SetLineCoding>
 800743a:	4603      	mov	r3, r0
 800743c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800744c:	e058      	b.n	8007500 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d055      	beq.n	8007500 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2204      	movs	r2, #4
 8007458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800745c:	e050      	b.n	8007500 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3340      	adds	r3, #64	; 0x40
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f860 	bl	800752a <GetLineCoding>
 800746a:	4603      	mov	r3, r0
 800746c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d126      	bne.n	80074c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007486:	791b      	ldrb	r3, [r3, #4]
 8007488:	429a      	cmp	r2, r3
 800748a:	d13b      	bne.n	8007504 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007496:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007498:	429a      	cmp	r2, r3
 800749a:	d133      	bne.n	8007504 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d12b      	bne.n	8007504 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d124      	bne.n	8007504 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f958 	bl	8007770 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074c0:	e020      	b.n	8007504 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d01d      	beq.n	8007504 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2204      	movs	r2, #4
 80074cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074d0:	e018      	b.n	8007504 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f867 	bl	80075a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8da 	bl	8007692 <CDC_ProcessReception>
      break;
 80074de:	e014      	b.n	800750a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 ffef 	bl	80084c6 <USBH_ClrFeature>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80074fa:	e005      	b.n	8007508 <USBH_CDC_Process+0x120>

    default:
      break;
 80074fc:	bf00      	nop
 80074fe:	e004      	b.n	800750a <USBH_CDC_Process+0x122>
      break;
 8007500:	bf00      	nop
 8007502:	e002      	b.n	800750a <USBH_CDC_Process+0x122>
      break;
 8007504:	bf00      	nop
 8007506:	e000      	b.n	800750a <USBH_CDC_Process+0x122>
      break;
 8007508:	bf00      	nop

  }

  return status;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	22a1      	movs	r2, #161	; 0xa1
 8007538:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2221      	movs	r2, #33	; 0x21
 800753e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2207      	movs	r2, #7
 8007550:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2207      	movs	r2, #7
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fa83 	bl	8008a64 <USBH_CtlReq>
 800755e:	4603      	mov	r3, r0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2221      	movs	r2, #33	; 0x21
 8007576:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2207      	movs	r2, #7
 800758e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2207      	movs	r2, #7
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fa64 	bl	8008a64 <USBH_CtlReq>
 800759c:	4603      	mov	r3, r0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af02      	add	r7, sp, #8
 80075ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d002      	beq.n	80075cc <CDC_ProcessTransmission+0x26>
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d023      	beq.n	8007612 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80075ca:	e05e      	b.n	800768a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	8b12      	ldrh	r2, [r2, #24]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d90b      	bls.n	80075f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	69d9      	ldr	r1, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8b1a      	ldrh	r2, [r3, #24]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	7b5b      	ldrb	r3, [r3, #13]
 80075e4:	2001      	movs	r0, #1
 80075e6:	9000      	str	r0, [sp, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fc4a 	bl	8008e82 <USBH_BulkSendData>
 80075ee:	e00b      	b.n	8007608 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	7b5b      	ldrb	r3, [r3, #13]
 80075fe:	2001      	movs	r0, #1
 8007600:	9000      	str	r0, [sp, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fc3d 	bl	8008e82 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007610:	e03b      	b.n	800768a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	7b5b      	ldrb	r3, [r3, #13]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 ff61 	bl	80094e0 <USBH_LL_GetURBState>
 800761e:	4603      	mov	r3, r0
 8007620:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007622:	7afb      	ldrb	r3, [r7, #11]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d128      	bne.n	800767a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	8b12      	ldrh	r2, [r2, #24]
 8007630:	4293      	cmp	r3, r2
 8007632:	d90e      	bls.n	8007652 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	8b12      	ldrh	r2, [r2, #24]
 800763c:	1a9a      	subs	r2, r3, r2
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	8b12      	ldrh	r2, [r2, #24]
 800764a:	441a      	add	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	61da      	str	r2, [r3, #28]
 8007650:	e002      	b.n	8007658 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007668:	e00e      	b.n	8007688 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f868 	bl	8007748 <USBH_CDC_TransmitCallback>
      break;
 8007678:	e006      	b.n	8007688 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800767a:	7afb      	ldrb	r3, [r7, #11]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d103      	bne.n	8007688 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007688:	bf00      	nop
  }
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d002      	beq.n	80076b8 <CDC_ProcessReception+0x26>
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d00e      	beq.n	80076d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80076b6:	e043      	b.n	8007740 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	6a19      	ldr	r1, [r3, #32]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	8b5a      	ldrh	r2, [r3, #26]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	7b1b      	ldrb	r3, [r3, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fc01 	bl	8008ecc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2204      	movs	r2, #4
 80076ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80076d2:	e035      	b.n	8007740 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	7b1b      	ldrb	r3, [r3, #12]
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 ff00 	bl	80094e0 <USBH_LL_GetURBState>
 80076e0:	4603      	mov	r3, r0
 80076e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80076e4:	7cfb      	ldrb	r3, [r7, #19]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d129      	bne.n	800773e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	7b1b      	ldrb	r3, [r3, #12]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fe63 	bl	80093bc <USBH_LL_GetLastXferSize>
 80076f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d016      	beq.n	8007730 <CDC_ProcessReception+0x9e>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	8b5b      	ldrh	r3, [r3, #26]
 8007706:	461a      	mov	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4293      	cmp	r3, r2
 800770c:	d910      	bls.n	8007730 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	6a1a      	ldr	r2, [r3, #32]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	441a      	add	r2, r3
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2203      	movs	r2, #3
 800772a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800772e:	e006      	b.n	800773e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f80f 	bl	800775c <USBH_CDC_ReceiveCallback>
      break;
 800773e:	bf00      	nop
  }
}
 8007740:	bf00      	nop
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007798:	2302      	movs	r3, #2
 800779a:	e029      	b.n	80077f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	79fa      	ldrb	r2, [r7, #7]
 80077a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f81f 	bl	80077f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f001 fd33 	bl	8009254 <USBH_LL_Init>

  return USBH_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e009      	b.n	800781e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	33e0      	adds	r3, #224	; 0xe0
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	2200      	movs	r2, #0
 8007816:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b0f      	cmp	r3, #15
 8007822:	d9f2      	bls.n	800780a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e009      	b.n	800783e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	d3f1      	bcc.n	800782a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2240      	movs	r2, #64	; 0x40
 800786a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d016      	beq.n	80078e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10e      	bne.n	80078dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078c4:	1c59      	adds	r1, r3, #1
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	33de      	adds	r3, #222	; 0xde
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
 80078da:	e004      	b.n	80078e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078dc:	2302      	movs	r3, #2
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	e001      	b.n	80078e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078e2:	2302      	movs	r3, #2
 80078e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	429a      	cmp	r2, r3
 800790e:	d204      	bcs.n	800791a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	78fa      	ldrb	r2, [r7, #3]
 8007914:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007918:	e001      	b.n	800791e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800791a:	2302      	movs	r3, #2
 800791c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	4608      	mov	r0, r1
 8007936:	4611      	mov	r1, r2
 8007938:	461a      	mov	r2, r3
 800793a:	4603      	mov	r3, r0
 800793c:	70fb      	strb	r3, [r7, #3]
 800793e:	460b      	mov	r3, r1
 8007940:	70bb      	strb	r3, [r7, #2]
 8007942:	4613      	mov	r3, r2
 8007944:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007954:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007956:	e025      	b.n	80079a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	221a      	movs	r2, #26
 800795c:	fb02 f303 	mul.w	r3, r2, r3
 8007960:	3308      	adds	r3, #8
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	3302      	adds	r3, #2
 8007968:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	795b      	ldrb	r3, [r3, #5]
 800796e:	78fa      	ldrb	r2, [r7, #3]
 8007970:	429a      	cmp	r2, r3
 8007972:	d002      	beq.n	800797a <USBH_FindInterface+0x4e>
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	2bff      	cmp	r3, #255	; 0xff
 8007978:	d111      	bne.n	800799e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800797e:	78ba      	ldrb	r2, [r7, #2]
 8007980:	429a      	cmp	r2, r3
 8007982:	d002      	beq.n	800798a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007984:	78bb      	ldrb	r3, [r7, #2]
 8007986:	2bff      	cmp	r3, #255	; 0xff
 8007988:	d109      	bne.n	800799e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800798e:	787a      	ldrb	r2, [r7, #1]
 8007990:	429a      	cmp	r2, r3
 8007992:	d002      	beq.n	800799a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007994:	787b      	ldrb	r3, [r7, #1]
 8007996:	2bff      	cmp	r3, #255	; 0xff
 8007998:	d101      	bne.n	800799e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	e006      	b.n	80079ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	3301      	adds	r3, #1
 80079a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d9d6      	bls.n	8007958 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079aa:	23ff      	movs	r3, #255	; 0xff
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fc83 	bl	80092cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80079c6:	2101      	movs	r1, #1
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fd9c 	bl	8009506 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af04      	add	r7, sp, #16
 80079de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079e0:	2302      	movs	r3, #2
 80079e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d102      	bne.n	80079fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2203      	movs	r2, #3
 80079f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b0b      	cmp	r3, #11
 8007a02:	f200 81be 	bhi.w	8007d82 <USBH_Process+0x3aa>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <USBH_Process+0x34>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a3d 	.word	0x08007a3d
 8007a10:	08007a6f 	.word	0x08007a6f
 8007a14:	08007ad7 	.word	0x08007ad7
 8007a18:	08007d1d 	.word	0x08007d1d
 8007a1c:	08007d83 	.word	0x08007d83
 8007a20:	08007b7b 	.word	0x08007b7b
 8007a24:	08007cc3 	.word	0x08007cc3
 8007a28:	08007bb1 	.word	0x08007bb1
 8007a2c:	08007bd1 	.word	0x08007bd1
 8007a30:	08007bf1 	.word	0x08007bf1
 8007a34:	08007c35 	.word	0x08007c35
 8007a38:	08007d05 	.word	0x08007d05
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 819e 	beq.w	8007d86 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a50:	20c8      	movs	r0, #200	; 0xc8
 8007a52:	f001 fd9f 	bl	8009594 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 fc95 	bl	8009386 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a6c:	e18b      	b.n	8007d86 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d107      	bne.n	8007a88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a86:	e18d      	b.n	8007da4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a92:	d914      	bls.n	8007abe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d903      	bls.n	8007ab6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	220d      	movs	r2, #13
 8007ab2:	701a      	strb	r2, [r3, #0]
      break;
 8007ab4:	e176      	b.n	8007da4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
      break;
 8007abc:	e172      	b.n	8007da4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ac4:	f103 020a 	add.w	r2, r3, #10
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007ace:	200a      	movs	r0, #10
 8007ad0:	f001 fd60 	bl	8009594 <USBH_Delay>
      break;
 8007ad4:	e166      	b.n	8007da4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ae6:	2104      	movs	r1, #4
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007aec:	2064      	movs	r0, #100	; 0x64
 8007aee:	f001 fd51 	bl	8009594 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 fc20 	bl	8009338 <USBH_LL_GetSpeed>
 8007af8:	4603      	mov	r3, r0
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2205      	movs	r2, #5
 8007b06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b08:	2100      	movs	r1, #0
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fa2b 	bl	8008f66 <USBH_AllocPipe>
 8007b10:	4603      	mov	r3, r0
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b18:	2180      	movs	r1, #128	; 0x80
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fa23 	bl	8008f66 <USBH_AllocPipe>
 8007b20:	4603      	mov	r3, r0
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7919      	ldrb	r1, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	9202      	str	r2, [sp, #8]
 8007b40:	2200      	movs	r2, #0
 8007b42:	9201      	str	r2, [sp, #4]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4603      	mov	r3, r0
 8007b48:	2280      	movs	r2, #128	; 0x80
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 f9dc 	bl	8008f08 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7959      	ldrb	r1, [r3, #5]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b64:	b292      	uxth	r2, r2
 8007b66:	9202      	str	r2, [sp, #8]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	9201      	str	r2, [sp, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2200      	movs	r2, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 f9c8 	bl	8008f08 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b78:	e114      	b.n	8007da4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f918 	bl	8007db0 <USBH_HandleEnum>
 8007b80:	4603      	mov	r3, r0
 8007b82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 80fe 	bne.w	8007d8a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d103      	bne.n	8007ba8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ba6:	e0f0      	b.n	8007d8a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2207      	movs	r2, #7
 8007bac:	701a      	strb	r2, [r3, #0]
      break;
 8007bae:	e0ec      	b.n	8007d8a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 80e9 	beq.w	8007d8e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2208      	movs	r2, #8
 8007bcc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007bce:	e0de      	b.n	8007d8e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fc2c 	bl	8008438 <USBH_SetCfg>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 80d5 	bne.w	8007d92 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2209      	movs	r2, #9
 8007bec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bee:	e0d0      	b.n	8007d92 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d016      	beq.n	8007c2c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007bfe:	2101      	movs	r1, #1
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fc3c 	bl	800847e <USBH_SetFeature>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	220a      	movs	r2, #10
 8007c16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c18:	e0bd      	b.n	8007d96 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	f040 80b9 	bne.w	8007d96 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	220a      	movs	r2, #10
 8007c28:	701a      	strb	r2, [r3, #0]
      break;
 8007c2a:	e0b4      	b.n	8007d96 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	220a      	movs	r2, #10
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e0b0      	b.n	8007d96 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80ad 	beq.w	8007d9a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e016      	b.n	8007c7c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c4e:	7bfa      	ldrb	r2, [r7, #15]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	32de      	adds	r2, #222	; 0xde
 8007c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c58:	791a      	ldrb	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d108      	bne.n	8007c76 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007c64:	7bfa      	ldrb	r2, [r7, #15]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	32de      	adds	r2, #222	; 0xde
 8007c6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007c74:	e005      	b.n	8007c82 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0e5      	beq.n	8007c4e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d016      	beq.n	8007cba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2206      	movs	r2, #6
 8007ca2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007caa:	2103      	movs	r1, #3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cb0:	e073      	b.n	8007d9a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	220d      	movs	r2, #13
 8007cb6:	701a      	strb	r2, [r3, #0]
      break;
 8007cb8:	e06f      	b.n	8007d9a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	220d      	movs	r2, #13
 8007cbe:	701a      	strb	r2, [r3, #0]
      break;
 8007cc0:	e06b      	b.n	8007d9a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d017      	beq.n	8007cfc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	220b      	movs	r2, #11
 8007ce8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cea:	e058      	b.n	8007d9e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d154      	bne.n	8007d9e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	220d      	movs	r2, #13
 8007cf8:	701a      	strb	r2, [r3, #0]
      break;
 8007cfa:	e050      	b.n	8007d9e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	220d      	movs	r2, #13
 8007d00:	701a      	strb	r2, [r3, #0]
      break;
 8007d02:	e04c      	b.n	8007d9e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d049      	beq.n	8007da2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
      }
      break;
 8007d1a:	e042      	b.n	8007da2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff fd67 	bl	80077f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d009      	beq.n	8007d48 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d58:	2105      	movs	r1, #5
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d107      	bne.n	8007d7a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fe20 	bl	80079b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d78:	e014      	b.n	8007da4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 faa6 	bl	80092cc <USBH_LL_Start>
      break;
 8007d80:	e010      	b.n	8007da4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007d82:	bf00      	nop
 8007d84:	e00e      	b.n	8007da4 <USBH_Process+0x3cc>
      break;
 8007d86:	bf00      	nop
 8007d88:	e00c      	b.n	8007da4 <USBH_Process+0x3cc>
      break;
 8007d8a:	bf00      	nop
 8007d8c:	e00a      	b.n	8007da4 <USBH_Process+0x3cc>
    break;
 8007d8e:	bf00      	nop
 8007d90:	e008      	b.n	8007da4 <USBH_Process+0x3cc>
      break;
 8007d92:	bf00      	nop
 8007d94:	e006      	b.n	8007da4 <USBH_Process+0x3cc>
      break;
 8007d96:	bf00      	nop
 8007d98:	e004      	b.n	8007da4 <USBH_Process+0x3cc>
      break;
 8007d9a:	bf00      	nop
 8007d9c:	e002      	b.n	8007da4 <USBH_Process+0x3cc>
      break;
 8007d9e:	bf00      	nop
 8007da0:	e000      	b.n	8007da4 <USBH_Process+0x3cc>
      break;
 8007da2:	bf00      	nop
  }
  return USBH_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop

08007db0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af04      	add	r7, sp, #16
 8007db6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007db8:	2301      	movs	r3, #1
 8007dba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b07      	cmp	r3, #7
 8007dc6:	f200 81c1 	bhi.w	800814c <USBH_HandleEnum+0x39c>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <USBH_HandleEnum+0x20>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007df1 	.word	0x08007df1
 8007dd4:	08007eaf 	.word	0x08007eaf
 8007dd8:	08007f19 	.word	0x08007f19
 8007ddc:	08007fa7 	.word	0x08007fa7
 8007de0:	08008011 	.word	0x08008011
 8007de4:	08008081 	.word	0x08008081
 8007de8:	080080c7 	.word	0x080080c7
 8007dec:	0800810d 	.word	0x0800810d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007df0:	2108      	movs	r1, #8
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa50 	bl	8008298 <USBH_Get_DevDesc>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d130      	bne.n	8007e64 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7919      	ldrb	r1, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e26:	b292      	uxth	r2, r2
 8007e28:	9202      	str	r2, [sp, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	9201      	str	r2, [sp, #4]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	4603      	mov	r3, r0
 8007e32:	2280      	movs	r2, #128	; 0x80
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 f867 	bl	8008f08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	7959      	ldrb	r1, [r3, #5]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e4e:	b292      	uxth	r2, r2
 8007e50:	9202      	str	r2, [sp, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	9201      	str	r2, [sp, #4]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f853 	bl	8008f08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e62:	e175      	b.n	8008150 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	f040 8172 	bne.w	8008150 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e72:	3301      	adds	r3, #1
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d903      	bls.n	8007e8e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	220d      	movs	r2, #13
 8007e8a:	701a      	strb	r2, [r3, #0]
      break;
 8007e8c:	e160      	b.n	8008150 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	795b      	ldrb	r3, [r3, #5]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f887 	bl	8008fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	791b      	ldrb	r3, [r3, #4]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 f881 	bl	8008fa8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
      break;
 8007eac:	e150      	b.n	8008150 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007eae:	2112      	movs	r1, #18
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f9f1 	bl	8008298 <USBH_Get_DevDesc>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d103      	bne.n	8007ec8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ec6:	e145      	b.n	8008154 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	f040 8142 	bne.w	8008154 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d903      	bls.n	8007ef2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	220d      	movs	r2, #13
 8007eee:	701a      	strb	r2, [r3, #0]
      break;
 8007ef0:	e130      	b.n	8008154 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	795b      	ldrb	r3, [r3, #5]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f855 	bl	8008fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	791b      	ldrb	r3, [r3, #4]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 f84f 	bl	8008fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	701a      	strb	r2, [r3, #0]
      break;
 8007f16:	e11d      	b.n	8008154 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f18:	2101      	movs	r1, #1
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa68 	bl	80083f0 <USBH_SetAddress>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d132      	bne.n	8007f90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007f2a:	2002      	movs	r0, #2
 8007f2c:	f001 fb32 	bl	8009594 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7919      	ldrb	r1, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f52:	b292      	uxth	r2, r2
 8007f54:	9202      	str	r2, [sp, #8]
 8007f56:	2200      	movs	r2, #0
 8007f58:	9201      	str	r2, [sp, #4]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2280      	movs	r2, #128	; 0x80
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 ffd1 	bl	8008f08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	7959      	ldrb	r1, [r3, #5]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f7a:	b292      	uxth	r2, r2
 8007f7c:	9202      	str	r2, [sp, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	9201      	str	r2, [sp, #4]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	2200      	movs	r2, #0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 ffbd 	bl	8008f08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f8e:	e0e3      	b.n	8008158 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	f040 80e0 	bne.w	8008158 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	220d      	movs	r2, #13
 8007f9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	705a      	strb	r2, [r3, #1]
      break;
 8007fa4:	e0d8      	b.n	8008158 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007fa6:	2109      	movs	r1, #9
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f99d 	bl	80082e8 <USBH_Get_CfgDesc>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d103      	bne.n	8007fc0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fbe:	e0cd      	b.n	800815c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	f040 80ca 	bne.w	800815c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fce:	3301      	adds	r3, #1
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d903      	bls.n	8007fea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	220d      	movs	r2, #13
 8007fe6:	701a      	strb	r2, [r3, #0]
      break;
 8007fe8:	e0b8      	b.n	800815c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	795b      	ldrb	r3, [r3, #5]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 ffd9 	bl	8008fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	791b      	ldrb	r3, [r3, #4]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 ffd3 	bl	8008fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
      break;
 800800e:	e0a5      	b.n	800815c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f965 	bl	80082e8 <USBH_Get_CfgDesc>
 800801e:	4603      	mov	r3, r0
 8008020:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d103      	bne.n	8008030 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2205      	movs	r2, #5
 800802c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800802e:	e097      	b.n	8008160 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b03      	cmp	r3, #3
 8008034:	f040 8094 	bne.w	8008160 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800803e:	3301      	adds	r3, #1
 8008040:	b2da      	uxtb	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800804e:	2b03      	cmp	r3, #3
 8008050:	d903      	bls.n	800805a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	220d      	movs	r2, #13
 8008056:	701a      	strb	r2, [r3, #0]
      break;
 8008058:	e082      	b.n	8008160 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	795b      	ldrb	r3, [r3, #5]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 ffa1 	bl	8008fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	791b      	ldrb	r3, [r3, #4]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 ff9b 	bl	8008fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
      break;
 800807e:	e06f      	b.n	8008160 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008086:	2b00      	cmp	r3, #0
 8008088:	d019      	beq.n	80080be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008096:	23ff      	movs	r3, #255	; 0xff
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f949 	bl	8008330 <USBH_Get_StringDesc>
 800809e:	4603      	mov	r3, r0
 80080a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d103      	bne.n	80080b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2206      	movs	r2, #6
 80080ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080ae:	e059      	b.n	8008164 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d156      	bne.n	8008164 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2206      	movs	r2, #6
 80080ba:	705a      	strb	r2, [r3, #1]
      break;
 80080bc:	e052      	b.n	8008164 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2206      	movs	r2, #6
 80080c2:	705a      	strb	r2, [r3, #1]
      break;
 80080c4:	e04e      	b.n	8008164 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d019      	beq.n	8008104 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80080dc:	23ff      	movs	r3, #255	; 0xff
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f926 	bl	8008330 <USBH_Get_StringDesc>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d103      	bne.n	80080f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2207      	movs	r2, #7
 80080f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080f4:	e038      	b.n	8008168 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d135      	bne.n	8008168 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2207      	movs	r2, #7
 8008100:	705a      	strb	r2, [r3, #1]
      break;
 8008102:	e031      	b.n	8008168 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2207      	movs	r2, #7
 8008108:	705a      	strb	r2, [r3, #1]
      break;
 800810a:	e02d      	b.n	8008168 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008112:	2b00      	cmp	r3, #0
 8008114:	d017      	beq.n	8008146 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008122:	23ff      	movs	r3, #255	; 0xff
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f903 	bl	8008330 <USBH_Get_StringDesc>
 800812a:	4603      	mov	r3, r0
 800812c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008138:	e018      	b.n	800816c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b03      	cmp	r3, #3
 800813e:	d115      	bne.n	800816c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
      break;
 8008144:	e012      	b.n	800816c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]
      break;
 800814a:	e00f      	b.n	800816c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800814c:	bf00      	nop
 800814e:	e00e      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 8008150:	bf00      	nop
 8008152:	e00c      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 8008154:	bf00      	nop
 8008156:	e00a      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 8008158:	bf00      	nop
 800815a:	e008      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 800815c:	bf00      	nop
 800815e:	e006      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 8008160:	bf00      	nop
 8008162:	e004      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 8008164:	bf00      	nop
 8008166:	e002      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 8008168:	bf00      	nop
 800816a:	e000      	b.n	800816e <USBH_HandleEnum+0x3be>
      break;
 800816c:	bf00      	nop
  }
  return Status;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f804 	bl	80081ba <USBH_HandleSof>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b0b      	cmp	r3, #11
 80081ca:	d10a      	bne.n	80081e2 <USBH_HandleSof+0x28>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
  }
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80081fa:	bf00      	nop
}
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008216:	bf00      	nop
}
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f846 	bl	8009302 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fe93 	bl	8008fa8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	795b      	ldrb	r3, [r3, #5]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fe8d 	bl	8008fa8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af02      	add	r7, sp, #8
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f864 	bl	8008386 <USBH_GetDescriptor>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	b292      	uxth	r2, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	f000 f919 	bl	8008510 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	331c      	adds	r3, #28
 80082f8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80082fa:	887b      	ldrh	r3, [r7, #2]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008304:	2100      	movs	r1, #0
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f83d 	bl	8008386 <USBH_GetDescriptor>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d107      	bne.n	8008326 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008316:	887b      	ldrh	r3, [r7, #2]
 8008318:	461a      	mov	r2, r3
 800831a:	68b9      	ldr	r1, [r7, #8]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f989 	bl	8008634 <USBH_ParseCfgDesc>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	461a      	mov	r2, r3
 800833c:	460b      	mov	r3, r1
 800833e:	72fb      	strb	r3, [r7, #11]
 8008340:	4613      	mov	r3, r2
 8008342:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800834c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008354:	893b      	ldrh	r3, [r7, #8]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	460b      	mov	r3, r1
 800835a:	2100      	movs	r1, #0
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f812 	bl	8008386 <USBH_GetDescriptor>
 8008362:	4603      	mov	r3, r0
 8008364:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d107      	bne.n	800837c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008372:	893a      	ldrh	r2, [r7, #8]
 8008374:	6879      	ldr	r1, [r7, #4]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fb26 	bl	80089c8 <USBH_ParseStringDesc>
  }

  return status;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	607b      	str	r3, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	72fb      	strb	r3, [r7, #11]
 8008394:	4613      	mov	r3, r2
 8008396:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	789b      	ldrb	r3, [r3, #2]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d11c      	bne.n	80083da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2206      	movs	r2, #6
 80083b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	893a      	ldrh	r2, [r7, #8]
 80083b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80083b8:	893b      	ldrh	r3, [r7, #8]
 80083ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083c2:	d104      	bne.n	80083ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f240 4209 	movw	r2, #1033	; 0x409
 80083ca:	829a      	strh	r2, [r3, #20]
 80083cc:	e002      	b.n	80083d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8b3a      	ldrh	r2, [r7, #24]
 80083d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80083da:	8b3b      	ldrh	r3, [r7, #24]
 80083dc:	461a      	mov	r2, r3
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 fb3f 	bl	8008a64 <USBH_CtlReq>
 80083e6:	4603      	mov	r3, r0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	789b      	ldrb	r3, [r3, #2]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d10f      	bne.n	8008424 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2205      	movs	r2, #5
 800840e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	b29a      	uxth	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008424:	2200      	movs	r2, #0
 8008426:	2100      	movs	r1, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fb1b 	bl	8008a64 <USBH_CtlReq>
 800842e:	4603      	mov	r3, r0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	789b      	ldrb	r3, [r3, #2]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d10e      	bne.n	800846a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2209      	movs	r2, #9
 8008456:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	887a      	ldrh	r2, [r7, #2]
 800845c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800846a:	2200      	movs	r2, #0
 800846c:	2100      	movs	r1, #0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 faf8 	bl	8008a64 <USBH_CtlReq>
 8008474:	4603      	mov	r3, r0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	789b      	ldrb	r3, [r3, #2]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d10f      	bne.n	80084b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2203      	movs	r2, #3
 800849c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084b2:	2200      	movs	r2, #0
 80084b4:	2100      	movs	r1, #0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fad4 	bl	8008a64 <USBH_CtlReq>
 80084bc:	4603      	mov	r3, r0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	789b      	ldrb	r3, [r3, #2]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d10f      	bne.n	80084fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80084fa:	2200      	movs	r2, #0
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fab0 	bl	8008a64 <USBH_CtlReq>
 8008504:	4603      	mov	r3, r0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	781a      	ldrb	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	785a      	ldrb	r2, [r3, #1]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	3302      	adds	r3, #2
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b29a      	uxth	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3303      	adds	r3, #3
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	021b      	lsls	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	4313      	orrs	r3, r2
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	791a      	ldrb	r2, [r3, #4]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	795a      	ldrb	r2, [r3, #5]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	799a      	ldrb	r2, [r3, #6]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	79da      	ldrb	r2, [r3, #7]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	79db      	ldrb	r3, [r3, #7]
 800856e:	2b20      	cmp	r3, #32
 8008570:	dc0f      	bgt.n	8008592 <USBH_ParseDevDesc+0x82>
 8008572:	2b08      	cmp	r3, #8
 8008574:	db14      	blt.n	80085a0 <USBH_ParseDevDesc+0x90>
 8008576:	3b08      	subs	r3, #8
 8008578:	4a2d      	ldr	r2, [pc, #180]	; (8008630 <USBH_ParseDevDesc+0x120>)
 800857a:	fa22 f303 	lsr.w	r3, r2, r3
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	bf14      	ite	ne
 8008586:	2301      	movne	r3, #1
 8008588:	2300      	moveq	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <USBH_ParseDevDesc+0x86>
 8008590:	e006      	b.n	80085a0 <USBH_ParseDevDesc+0x90>
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d104      	bne.n	80085a0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	79da      	ldrb	r2, [r3, #7]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	71da      	strb	r2, [r3, #7]
      break;
 800859e:	e003      	b.n	80085a8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2240      	movs	r2, #64	; 0x40
 80085a4:	71da      	strb	r2, [r3, #7]
      break;
 80085a6:	bf00      	nop
  }

  if (length > 8U)
 80085a8:	88fb      	ldrh	r3, [r7, #6]
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d939      	bls.n	8008622 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	3308      	adds	r3, #8
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3309      	adds	r3, #9
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	4313      	orrs	r3, r2
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	330a      	adds	r3, #10
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	330b      	adds	r3, #11
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	021b      	lsls	r3, r3, #8
 80085dc:	b29b      	uxth	r3, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	330c      	adds	r3, #12
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	330d      	adds	r3, #13
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	021b      	lsls	r3, r3, #8
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	7b9a      	ldrb	r2, [r3, #14]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	7bda      	ldrb	r2, [r3, #15]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	7c1a      	ldrb	r2, [r3, #16]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	7c5a      	ldrb	r2, [r3, #17]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	745a      	strb	r2, [r3, #17]
  }
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	01000101 	.word	0x01000101

08008634 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008648:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	785a      	ldrb	r2, [r3, #1]
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3302      	adds	r3, #2
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	b29a      	uxth	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3303      	adds	r3, #3
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	b29b      	uxth	r3, r3
 8008688:	4313      	orrs	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008690:	bf28      	it	cs
 8008692:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008696:	b29a      	uxth	r2, r3
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	791a      	ldrb	r2, [r3, #4]
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	795a      	ldrb	r2, [r3, #5]
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	799a      	ldrb	r2, [r3, #6]
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	79da      	ldrb	r2, [r3, #7]
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	7a1a      	ldrb	r2, [r3, #8]
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b09      	cmp	r3, #9
 80086ca:	d002      	beq.n	80086d2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	2209      	movs	r2, #9
 80086d0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	2b09      	cmp	r3, #9
 80086d6:	f240 809d 	bls.w	8008814 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80086da:	2309      	movs	r3, #9
 80086dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80086e2:	e081      	b.n	80087e8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80086e4:	f107 0316 	add.w	r3, r7, #22
 80086e8:	4619      	mov	r1, r3
 80086ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ec:	f000 f99f 	bl	8008a2e <USBH_GetNextDesc>
 80086f0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d176      	bne.n	80087e8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b09      	cmp	r3, #9
 8008700:	d002      	beq.n	8008708 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	2209      	movs	r2, #9
 8008706:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800870c:	221a      	movs	r2, #26
 800870e:	fb02 f303 	mul.w	r3, r2, r3
 8008712:	3308      	adds	r3, #8
 8008714:	6a3a      	ldr	r2, [r7, #32]
 8008716:	4413      	add	r3, r2
 8008718:	3302      	adds	r3, #2
 800871a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800871c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800871e:	69f8      	ldr	r0, [r7, #28]
 8008720:	f000 f87e 	bl	8008820 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800872e:	e043      	b.n	80087b8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008730:	f107 0316 	add.w	r3, r7, #22
 8008734:	4619      	mov	r1, r3
 8008736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008738:	f000 f979 	bl	8008a2e <USBH_GetNextDesc>
 800873c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b05      	cmp	r3, #5
 8008744:	d138      	bne.n	80087b8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d10f      	bne.n	800876e <USBH_ParseCfgDesc+0x13a>
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	799b      	ldrb	r3, [r3, #6]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d10b      	bne.n	800876e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	79db      	ldrb	r3, [r3, #7]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10f      	bne.n	800877e <USBH_ParseCfgDesc+0x14a>
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b09      	cmp	r3, #9
 8008764:	d00b      	beq.n	800877e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	2209      	movs	r2, #9
 800876a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800876c:	e007      	b.n	800877e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b07      	cmp	r3, #7
 8008774:	d004      	beq.n	8008780 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	2207      	movs	r2, #7
 800877a:	701a      	strb	r2, [r3, #0]
 800877c:	e000      	b.n	8008780 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800877e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008784:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008788:	3201      	adds	r2, #1
 800878a:	00d2      	lsls	r2, r2, #3
 800878c:	211a      	movs	r1, #26
 800878e:	fb01 f303 	mul.w	r3, r1, r3
 8008792:	4413      	add	r3, r2
 8008794:	3308      	adds	r3, #8
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	4413      	add	r3, r2
 800879a:	3304      	adds	r3, #4
 800879c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800879e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a0:	69b9      	ldr	r1, [r7, #24]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f86b 	bl	800887e <USBH_ParseEPDesc>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80087ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087b2:	3301      	adds	r3, #1
 80087b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	791b      	ldrb	r3, [r3, #4]
 80087bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d204      	bcs.n	80087ce <USBH_ParseCfgDesc+0x19a>
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	885a      	ldrh	r2, [r3, #2]
 80087c8:	8afb      	ldrh	r3, [r7, #22]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d8b0      	bhi.n	8008730 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	791b      	ldrb	r3, [r3, #4]
 80087d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d201      	bcs.n	80087de <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80087da:	2303      	movs	r3, #3
 80087dc:	e01c      	b.n	8008818 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80087de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e2:	3301      	adds	r3, #1
 80087e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80087e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d805      	bhi.n	80087fc <USBH_ParseCfgDesc+0x1c8>
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	885a      	ldrh	r2, [r3, #2]
 80087f4:	8afb      	ldrh	r3, [r7, #22]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	f63f af74 	bhi.w	80086e4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	791b      	ldrb	r3, [r3, #4]
 8008800:	2b02      	cmp	r3, #2
 8008802:	bf28      	it	cs
 8008804:	2302      	movcs	r3, #2
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800880c:	429a      	cmp	r2, r3
 800880e:	d201      	bcs.n	8008814 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008810:	2303      	movs	r3, #3
 8008812:	e001      	b.n	8008818 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008818:	4618      	mov	r0, r3
 800881a:	3730      	adds	r7, #48	; 0x30
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	785a      	ldrb	r2, [r3, #1]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	789a      	ldrb	r2, [r3, #2]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	78da      	ldrb	r2, [r3, #3]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	791a      	ldrb	r2, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	795a      	ldrb	r2, [r3, #5]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	799a      	ldrb	r2, [r3, #6]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	79da      	ldrb	r2, [r3, #7]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	7a1a      	ldrb	r2, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	721a      	strb	r2, [r3, #8]
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800887e:	b480      	push	{r7}
 8008880:	b087      	sub	sp, #28
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	785a      	ldrb	r2, [r3, #1]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	789a      	ldrb	r2, [r3, #2]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	78da      	ldrb	r2, [r3, #3]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3304      	adds	r3, #4
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3305      	adds	r3, #5
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	799a      	ldrb	r2, [r3, #6]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	889b      	ldrh	r3, [r3, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d102      	bne.n	80088e0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80088da:	2303      	movs	r3, #3
 80088dc:	75fb      	strb	r3, [r7, #23]
 80088de:	e033      	b.n	8008948 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	889b      	ldrh	r3, [r3, #4]
 80088e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80088e8:	f023 0307 	bic.w	r3, r3, #7
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	889b      	ldrh	r3, [r3, #4]
 80088f6:	b21a      	sxth	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	b299      	uxth	r1, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3305      	adds	r3, #5
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	b29b      	uxth	r3, r3
 800890c:	430b      	orrs	r3, r1
 800890e:	b29b      	uxth	r3, r3
 8008910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008914:	2b00      	cmp	r3, #0
 8008916:	d110      	bne.n	800893a <USBH_ParseEPDesc+0xbc>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	b299      	uxth	r1, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3305      	adds	r3, #5
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	b29b      	uxth	r3, r3
 800892c:	430b      	orrs	r3, r1
 800892e:	b29b      	uxth	r3, r3
 8008930:	b21b      	sxth	r3, r3
 8008932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008936:	b21b      	sxth	r3, r3
 8008938:	e001      	b.n	800893e <USBH_ParseEPDesc+0xc0>
 800893a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800893e:	4313      	orrs	r3, r2
 8008940:	b21b      	sxth	r3, r3
 8008942:	b29a      	uxth	r2, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800894e:	2b00      	cmp	r3, #0
 8008950:	d116      	bne.n	8008980 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	78db      	ldrb	r3, [r3, #3]
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	2b01      	cmp	r3, #1
 800895c:	d005      	beq.n	800896a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	78db      	ldrb	r3, [r3, #3]
 8008962:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008966:	2b03      	cmp	r3, #3
 8008968:	d127      	bne.n	80089ba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	799b      	ldrb	r3, [r3, #6]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <USBH_ParseEPDesc+0xfc>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	799b      	ldrb	r3, [r3, #6]
 8008976:	2b10      	cmp	r3, #16
 8008978:	d91f      	bls.n	80089ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800897a:	2303      	movs	r3, #3
 800897c:	75fb      	strb	r3, [r7, #23]
 800897e:	e01c      	b.n	80089ba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	78db      	ldrb	r3, [r3, #3]
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d10a      	bne.n	80089a2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	799b      	ldrb	r3, [r3, #6]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <USBH_ParseEPDesc+0x11e>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	799b      	ldrb	r3, [r3, #6]
 8008998:	2b10      	cmp	r3, #16
 800899a:	d90e      	bls.n	80089ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800899c:	2303      	movs	r3, #3
 800899e:	75fb      	strb	r3, [r7, #23]
 80089a0:	e00b      	b.n	80089ba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	78db      	ldrb	r3, [r3, #3]
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d105      	bne.n	80089ba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	799b      	ldrb	r3, [r3, #6]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80089b6:	2303      	movs	r3, #3
 80089b8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3301      	adds	r3, #1
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d120      	bne.n	8008a22 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	1e9a      	subs	r2, r3, #2
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	4293      	cmp	r3, r2
 80089ea:	bf28      	it	cs
 80089ec:	4613      	movcs	r3, r2
 80089ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3302      	adds	r3, #2
 80089f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80089f6:	2300      	movs	r3, #0
 80089f8:	82fb      	strh	r3, [r7, #22]
 80089fa:	e00b      	b.n	8008a14 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80089fc:	8afb      	ldrh	r3, [r7, #22]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	781a      	ldrb	r2, [r3, #0]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a0e:	8afb      	ldrh	r3, [r7, #22]
 8008a10:	3302      	adds	r3, #2
 8008a12:	82fb      	strh	r3, [r7, #22]
 8008a14:	8afa      	ldrh	r2, [r7, #22]
 8008a16:	8abb      	ldrh	r3, [r7, #20]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d3ef      	bcc.n	80089fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
  }
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	881a      	ldrh	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4413      	add	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a56:	68fb      	ldr	r3, [r7, #12]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	789b      	ldrb	r3, [r3, #2]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d002      	beq.n	8008a84 <USBH_CtlReq+0x20>
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d00f      	beq.n	8008aa2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008a82:	e027      	b.n	8008ad4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa0:	e018      	b.n	8008ad4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 f81c 	bl	8008ae0 <USBH_HandleControl>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <USBH_CtlReq+0x54>
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d106      	bne.n	8008ac6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	761a      	strb	r2, [r3, #24]
      break;
 8008ac4:	e005      	b.n	8008ad2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d102      	bne.n	8008ad2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	709a      	strb	r2, [r3, #2]
      break;
 8008ad2:	bf00      	nop
  }
  return status;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7e1b      	ldrb	r3, [r3, #24]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	f200 8156 	bhi.w	8008da8 <USBH_HandleControl+0x2c8>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <USBH_HandleControl+0x24>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b31 	.word	0x08008b31
 8008b08:	08008b4b 	.word	0x08008b4b
 8008b0c:	08008bb5 	.word	0x08008bb5
 8008b10:	08008bdb 	.word	0x08008bdb
 8008b14:	08008c13 	.word	0x08008c13
 8008b18:	08008c3d 	.word	0x08008c3d
 8008b1c:	08008c8f 	.word	0x08008c8f
 8008b20:	08008cb1 	.word	0x08008cb1
 8008b24:	08008ced 	.word	0x08008ced
 8008b28:	08008d13 	.word	0x08008d13
 8008b2c:	08008d51 	.word	0x08008d51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f103 0110 	add.w	r1, r3, #16
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	795b      	ldrb	r3, [r3, #5]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f943 	bl	8008dc8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2202      	movs	r2, #2
 8008b46:	761a      	strb	r2, [r3, #24]
      break;
 8008b48:	e139      	b.n	8008dbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	795b      	ldrb	r3, [r3, #5]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fcc5 	bl	80094e0 <USBH_LL_GetURBState>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d11e      	bne.n	8008b9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7c1b      	ldrb	r3, [r3, #16]
 8008b64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	8adb      	ldrh	r3, [r3, #22]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008b72:	7b7b      	ldrb	r3, [r7, #13]
 8008b74:	2b80      	cmp	r3, #128	; 0x80
 8008b76:	d103      	bne.n	8008b80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b7e:	e115      	b.n	8008dac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2205      	movs	r2, #5
 8008b84:	761a      	strb	r2, [r3, #24]
      break;
 8008b86:	e111      	b.n	8008dac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008b88:	7b7b      	ldrb	r3, [r7, #13]
 8008b8a:	2b80      	cmp	r3, #128	; 0x80
 8008b8c:	d103      	bne.n	8008b96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2209      	movs	r2, #9
 8008b92:	761a      	strb	r2, [r3, #24]
      break;
 8008b94:	e10a      	b.n	8008dac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2207      	movs	r2, #7
 8008b9a:	761a      	strb	r2, [r3, #24]
      break;
 8008b9c:	e106      	b.n	8008dac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d003      	beq.n	8008bac <USBH_HandleControl+0xcc>
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	f040 8100 	bne.w	8008dac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	220b      	movs	r2, #11
 8008bb0:	761a      	strb	r2, [r3, #24]
      break;
 8008bb2:	e0fb      	b.n	8008dac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6899      	ldr	r1, [r3, #8]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	899a      	ldrh	r2, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	791b      	ldrb	r3, [r3, #4]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f93a 	bl	8008e46 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	761a      	strb	r2, [r3, #24]
      break;
 8008bd8:	e0f1      	b.n	8008dbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	791b      	ldrb	r3, [r3, #4]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fc7d 	bl	80094e0 <USBH_LL_GetURBState>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d102      	bne.n	8008bf6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2209      	movs	r2, #9
 8008bf4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	2b05      	cmp	r3, #5
 8008bfa:	d102      	bne.n	8008c02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c00:	e0d6      	b.n	8008db0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	f040 80d3 	bne.w	8008db0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	220b      	movs	r2, #11
 8008c0e:	761a      	strb	r2, [r3, #24]
      break;
 8008c10:	e0ce      	b.n	8008db0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6899      	ldr	r1, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	899a      	ldrh	r2, [r3, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	795b      	ldrb	r3, [r3, #5]
 8008c1e:	2001      	movs	r0, #1
 8008c20:	9000      	str	r0, [sp, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f8ea 	bl	8008dfc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2206      	movs	r2, #6
 8008c38:	761a      	strb	r2, [r3, #24]
      break;
 8008c3a:	e0c0      	b.n	8008dbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	795b      	ldrb	r3, [r3, #5]
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fc4c 	bl	80094e0 <USBH_LL_GetURBState>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d103      	bne.n	8008c5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2207      	movs	r2, #7
 8008c56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c58:	e0ac      	b.n	8008db4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	d105      	bne.n	8008c6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	220c      	movs	r2, #12
 8008c64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008c66:	2303      	movs	r3, #3
 8008c68:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6a:	e0a3      	b.n	8008db4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d103      	bne.n	8008c7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2205      	movs	r2, #5
 8008c76:	761a      	strb	r2, [r3, #24]
      break;
 8008c78:	e09c      	b.n	8008db4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	f040 8099 	bne.w	8008db4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	220b      	movs	r2, #11
 8008c86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8c:	e092      	b.n	8008db4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	791b      	ldrb	r3, [r3, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f8d5 	bl	8008e46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2208      	movs	r2, #8
 8008cac:	761a      	strb	r2, [r3, #24]

      break;
 8008cae:	e086      	b.n	8008dbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	791b      	ldrb	r3, [r3, #4]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fc12 	bl	80094e0 <USBH_LL_GetURBState>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d105      	bne.n	8008cd2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	220d      	movs	r2, #13
 8008cca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cd0:	e072      	b.n	8008db8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d103      	bne.n	8008ce0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	220b      	movs	r2, #11
 8008cdc:	761a      	strb	r2, [r3, #24]
      break;
 8008cde:	e06b      	b.n	8008db8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	d168      	bne.n	8008db8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cea:	e065      	b.n	8008db8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	795b      	ldrb	r3, [r3, #5]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	9200      	str	r2, [sp, #0]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f87f 	bl	8008dfc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	761a      	strb	r2, [r3, #24]
      break;
 8008d10:	e055      	b.n	8008dbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	795b      	ldrb	r3, [r3, #5]
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fbe1 	bl	80094e0 <USBH_LL_GetURBState>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d105      	bne.n	8008d34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	220d      	movs	r2, #13
 8008d30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d32:	e043      	b.n	8008dbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d103      	bne.n	8008d42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2209      	movs	r2, #9
 8008d3e:	761a      	strb	r2, [r3, #24]
      break;
 8008d40:	e03c      	b.n	8008dbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d139      	bne.n	8008dbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	220b      	movs	r2, #11
 8008d4c:	761a      	strb	r2, [r3, #24]
      break;
 8008d4e:	e035      	b.n	8008dbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7e5b      	ldrb	r3, [r3, #25]
 8008d54:	3301      	adds	r3, #1
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	765a      	strb	r2, [r3, #25]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	7e5b      	ldrb	r3, [r3, #25]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d806      	bhi.n	8008d72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d70:	e025      	b.n	8008dbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d78:	2106      	movs	r1, #6
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	795b      	ldrb	r3, [r3, #5]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f90c 	bl	8008fa8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	791b      	ldrb	r3, [r3, #4]
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f906 	bl	8008fa8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008da2:	2302      	movs	r3, #2
 8008da4:	73fb      	strb	r3, [r7, #15]
      break;
 8008da6:	e00a      	b.n	8008dbe <USBH_HandleControl+0x2de>

    default:
      break;
 8008da8:	bf00      	nop
 8008daa:	e008      	b.n	8008dbe <USBH_HandleControl+0x2de>
      break;
 8008dac:	bf00      	nop
 8008dae:	e006      	b.n	8008dbe <USBH_HandleControl+0x2de>
      break;
 8008db0:	bf00      	nop
 8008db2:	e004      	b.n	8008dbe <USBH_HandleControl+0x2de>
      break;
 8008db4:	bf00      	nop
 8008db6:	e002      	b.n	8008dbe <USBH_HandleControl+0x2de>
      break;
 8008db8:	bf00      	nop
 8008dba:	e000      	b.n	8008dbe <USBH_HandleControl+0x2de>
      break;
 8008dbc:	bf00      	nop
  }

  return status;
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af04      	add	r7, sp, #16
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dd6:	79f9      	ldrb	r1, [r7, #7]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	2308      	movs	r3, #8
 8008dde:	9302      	str	r3, [sp, #8]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	2300      	movs	r3, #0
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	2300      	movs	r3, #0
 8008dea:	2200      	movs	r2, #0
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 fb46 	bl	800947e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af04      	add	r7, sp, #16
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4611      	mov	r1, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	80fb      	strh	r3, [r7, #6]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e20:	7979      	ldrb	r1, [r7, #5]
 8008e22:	7e3b      	ldrb	r3, [r7, #24]
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	9302      	str	r3, [sp, #8]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	2300      	movs	r3, #0
 8008e34:	2200      	movs	r2, #0
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fb21 	bl	800947e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b088      	sub	sp, #32
 8008e4a:	af04      	add	r7, sp, #16
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	4611      	mov	r1, r2
 8008e52:	461a      	mov	r2, r3
 8008e54:	460b      	mov	r3, r1
 8008e56:	80fb      	strh	r3, [r7, #6]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e5c:	7979      	ldrb	r1, [r7, #5]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9303      	str	r3, [sp, #12]
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	9302      	str	r3, [sp, #8]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2201      	movs	r2, #1
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 fb03 	bl	800947e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e78:	2300      	movs	r3, #0

}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af04      	add	r7, sp, #16
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	461a      	mov	r2, r3
 8008e90:	460b      	mov	r3, r1
 8008e92:	80fb      	strh	r3, [r7, #6]
 8008e94:	4613      	mov	r3, r2
 8008e96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ea6:	7979      	ldrb	r1, [r7, #5]
 8008ea8:	7e3b      	ldrb	r3, [r7, #24]
 8008eaa:	9303      	str	r3, [sp, #12]
 8008eac:	88fb      	ldrh	r3, [r7, #6]
 8008eae:	9302      	str	r3, [sp, #8]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	2302      	movs	r3, #2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fade 	bl	800947e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af04      	add	r7, sp, #16
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	461a      	mov	r2, r3
 8008eda:	460b      	mov	r3, r1
 8008edc:	80fb      	strh	r3, [r7, #6]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ee2:	7979      	ldrb	r1, [r7, #5]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	9303      	str	r3, [sp, #12]
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	9302      	str	r3, [sp, #8]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 fac0 	bl	800947e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af04      	add	r7, sp, #16
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	4608      	mov	r0, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	461a      	mov	r2, r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	70fb      	strb	r3, [r7, #3]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70bb      	strb	r3, [r7, #2]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f22:	7878      	ldrb	r0, [r7, #1]
 8008f24:	78ba      	ldrb	r2, [r7, #2]
 8008f26:	78f9      	ldrb	r1, [r7, #3]
 8008f28:	8b3b      	ldrh	r3, [r7, #24]
 8008f2a:	9302      	str	r3, [sp, #8]
 8008f2c:	7d3b      	ldrb	r3, [r7, #20]
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	7c3b      	ldrb	r3, [r7, #16]
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	4603      	mov	r3, r0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa53 	bl	80093e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa72 	bl	8009440 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f836 	bl	8008fe4 <USBH_GetFreePipe>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008f7c:	89fb      	ldrh	r3, [r7, #14]
 8008f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00a      	beq.n	8008f9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	89fb      	ldrh	r3, [r7, #14]
 8008f8a:	f003 030f 	and.w	r3, r3, #15
 8008f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	33e0      	adds	r3, #224	; 0xe0
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f9c:	89fb      	ldrh	r3, [r7, #14]
 8008f9e:	b2db      	uxtb	r3, r3
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d80d      	bhi.n	8008fd6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	33e0      	adds	r3, #224	; 0xe0
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	33e0      	adds	r3, #224	; 0xe0
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	e00f      	b.n	8009016 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	33e0      	adds	r3, #224	; 0xe0
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	b29b      	uxth	r3, r3
 800900e:	e007      	b.n	8009020 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	3301      	adds	r3, #1
 8009014:	73fb      	strb	r3, [r7, #15]
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d9ec      	bls.n	8008ff6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800901c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009030:	2201      	movs	r2, #1
 8009032:	490e      	ldr	r1, [pc, #56]	; (800906c <MX_USB_HOST_Init+0x40>)
 8009034:	480e      	ldr	r0, [pc, #56]	; (8009070 <MX_USB_HOST_Init+0x44>)
 8009036:	f7fe fba5 	bl	8007784 <USBH_Init>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009040:	f7f8 faf8 	bl	8001634 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009044:	490b      	ldr	r1, [pc, #44]	; (8009074 <MX_USB_HOST_Init+0x48>)
 8009046:	480a      	ldr	r0, [pc, #40]	; (8009070 <MX_USB_HOST_Init+0x44>)
 8009048:	f7fe fc2a 	bl	80078a0 <USBH_RegisterClass>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009052:	f7f8 faef 	bl	8001634 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009056:	4806      	ldr	r0, [pc, #24]	; (8009070 <MX_USB_HOST_Init+0x44>)
 8009058:	f7fe fcae 	bl	80079b8 <USBH_Start>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009062:	f7f8 fae7 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009066:	bf00      	nop
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	0800908d 	.word	0x0800908d
 8009070:	200001e4 	.word	0x200001e4
 8009074:	2000000c 	.word	0x2000000c

08009078 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800907c:	4802      	ldr	r0, [pc, #8]	; (8009088 <MX_USB_HOST_Process+0x10>)
 800907e:	f7fe fcab 	bl	80079d8 <USBH_Process>
}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200001e4 	.word	0x200001e4

0800908c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	3b01      	subs	r3, #1
 800909c:	2b04      	cmp	r3, #4
 800909e:	d819      	bhi.n	80090d4 <USBH_UserProcess+0x48>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <USBH_UserProcess+0x1c>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090d5 	.word	0x080090d5
 80090ac:	080090c5 	.word	0x080090c5
 80090b0:	080090d5 	.word	0x080090d5
 80090b4:	080090cd 	.word	0x080090cd
 80090b8:	080090bd 	.word	0x080090bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80090bc:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <USBH_UserProcess+0x58>)
 80090be:	2203      	movs	r2, #3
 80090c0:	701a      	strb	r2, [r3, #0]
  break;
 80090c2:	e008      	b.n	80090d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <USBH_UserProcess+0x58>)
 80090c6:	2202      	movs	r2, #2
 80090c8:	701a      	strb	r2, [r3, #0]
  break;
 80090ca:	e004      	b.n	80090d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <USBH_UserProcess+0x58>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	701a      	strb	r2, [r3, #0]
  break;
 80090d2:	e000      	b.n	80090d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80090d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	200005bc 	.word	0x200005bc

080090e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f0:	f107 0314 	add.w	r3, r7, #20
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	609a      	str	r2, [r3, #8]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009108:	d147      	bne.n	800919a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	4b25      	ldr	r3, [pc, #148]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	4a24      	ldr	r2, [pc, #144]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 8009114:	f043 0301 	orr.w	r3, r3, #1
 8009118:	6313      	str	r3, [r2, #48]	; 0x30
 800911a:	4b22      	ldr	r3, [pc, #136]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 800911c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	613b      	str	r3, [r7, #16]
 8009124:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800912a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800912c:	2300      	movs	r3, #0
 800912e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009134:	f107 0314 	add.w	r3, r7, #20
 8009138:	4619      	mov	r1, r3
 800913a:	481b      	ldr	r0, [pc, #108]	; (80091a8 <HAL_HCD_MspInit+0xc0>)
 800913c:	f7f8 fe06 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009140:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009146:	2302      	movs	r3, #2
 8009148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800914e:	2300      	movs	r3, #0
 8009150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009152:	230a      	movs	r3, #10
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009156:	f107 0314 	add.w	r3, r7, #20
 800915a:	4619      	mov	r1, r3
 800915c:	4812      	ldr	r0, [pc, #72]	; (80091a8 <HAL_HCD_MspInit+0xc0>)
 800915e:	f7f8 fdf5 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009162:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	4a0f      	ldr	r2, [pc, #60]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 8009168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916c:	6353      	str	r3, [r2, #52]	; 0x34
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 8009174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009176:	4a0b      	ldr	r2, [pc, #44]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 8009178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800917c:	6453      	str	r3, [r2, #68]	; 0x44
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <HAL_HCD_MspInit+0xbc>)
 8009180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800918a:	2200      	movs	r2, #0
 800918c:	2100      	movs	r1, #0
 800918e:	2043      	movs	r0, #67	; 0x43
 8009190:	f7f8 fda5 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009194:	2043      	movs	r0, #67	; 0x43
 8009196:	f7f8 fdbe 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800919a:	bf00      	nop
 800919c:	3728      	adds	r7, #40	; 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	40023800 	.word	0x40023800
 80091a8:	40020000 	.word	0x40020000

080091ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe ffeb 	bl	8008196 <USBH_LL_IncTimer>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff f823 	bl	8008222 <USBH_LL_Connect>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff f82c 	bl	8008250 <USBH_LL_Disconnect>
}
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
 800920c:	4613      	mov	r3, r2
 800920e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe ffdd 	bl	80081ea <USBH_LL_PortEnabled>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe ffdd 	bl	8008206 <USBH_LL_PortDisabled>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009262:	2b01      	cmp	r3, #1
 8009264:	d12a      	bne.n	80092bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009266:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <USBH_LL_Init+0x74>)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a15      	ldr	r2, [pc, #84]	; (80092c8 <USBH_LL_Init+0x74>)
 8009272:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <USBH_LL_Init+0x74>)
 8009278:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800927c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800927e:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <USBH_LL_Init+0x74>)
 8009280:	2208      	movs	r2, #8
 8009282:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009284:	4b10      	ldr	r3, [pc, #64]	; (80092c8 <USBH_LL_Init+0x74>)
 8009286:	2201      	movs	r2, #1
 8009288:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800928a:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <USBH_LL_Init+0x74>)
 800928c:	2200      	movs	r2, #0
 800928e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009290:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <USBH_LL_Init+0x74>)
 8009292:	2202      	movs	r2, #2
 8009294:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <USBH_LL_Init+0x74>)
 8009298:	2200      	movs	r2, #0
 800929a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800929c:	480a      	ldr	r0, [pc, #40]	; (80092c8 <USBH_LL_Init+0x74>)
 800929e:	f7f8 ff0a 	bl	80020b6 <HAL_HCD_Init>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80092a8:	f7f8 f9c4 	bl	8001634 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80092ac:	4806      	ldr	r0, [pc, #24]	; (80092c8 <USBH_LL_Init+0x74>)
 80092ae:	f7f9 faee 	bl	800288e <HAL_HCD_GetCurrentFrame>
 80092b2:	4603      	mov	r3, r0
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fe ff5e 	bl	8008178 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	200005c0 	.word	0x200005c0

080092cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7f9 fa5d 	bl	80027a2 <HAL_HCD_Start>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f95c 	bl	80095ac <USBH_Get_USB_Status>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009318:	4618      	mov	r0, r3
 800931a:	f7f9 fa65 	bl	80027e8 <HAL_HCD_Stop>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f941 	bl	80095ac <USBH_Get_USB_Status>
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009340:	2301      	movs	r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800934a:	4618      	mov	r0, r3
 800934c:	f7f9 faad 	bl	80028aa <HAL_HCD_GetCurrentSpeed>
 8009350:	4603      	mov	r3, r0
 8009352:	2b02      	cmp	r3, #2
 8009354:	d00c      	beq.n	8009370 <USBH_LL_GetSpeed+0x38>
 8009356:	2b02      	cmp	r3, #2
 8009358:	d80d      	bhi.n	8009376 <USBH_LL_GetSpeed+0x3e>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <USBH_LL_GetSpeed+0x2c>
 800935e:	2b01      	cmp	r3, #1
 8009360:	d003      	beq.n	800936a <USBH_LL_GetSpeed+0x32>
 8009362:	e008      	b.n	8009376 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
    break;
 8009368:	e008      	b.n	800937c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800936a:	2301      	movs	r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]
    break;
 800936e:	e005      	b.n	800937c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009370:	2302      	movs	r3, #2
 8009372:	73fb      	strb	r3, [r7, #15]
    break;
 8009374:	e002      	b.n	800937c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009376:	2301      	movs	r3, #1
 8009378:	73fb      	strb	r3, [r7, #15]
    break;
 800937a:	bf00      	nop
  }
  return  speed;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800939c:	4618      	mov	r0, r3
 800939e:	f7f9 fa40 	bl	8002822 <HAL_HCD_ResetPort>
 80093a2:	4603      	mov	r3, r0
 80093a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 f8ff 	bl	80095ac <USBH_Get_USB_Status>
 80093ae:	4603      	mov	r3, r0
 80093b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	4611      	mov	r1, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7f9 fa47 	bl	8002866 <HAL_HCD_HC_GetXferCount>
 80093d8:	4603      	mov	r3, r0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093e2:	b590      	push	{r4, r7, lr}
 80093e4:	b089      	sub	sp, #36	; 0x24
 80093e6:	af04      	add	r7, sp, #16
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	4608      	mov	r0, r1
 80093ec:	4611      	mov	r1, r2
 80093ee:	461a      	mov	r2, r3
 80093f0:	4603      	mov	r3, r0
 80093f2:	70fb      	strb	r3, [r7, #3]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70bb      	strb	r3, [r7, #2]
 80093f8:	4613      	mov	r3, r2
 80093fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800940a:	787c      	ldrb	r4, [r7, #1]
 800940c:	78ba      	ldrb	r2, [r7, #2]
 800940e:	78f9      	ldrb	r1, [r7, #3]
 8009410:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009412:	9302      	str	r3, [sp, #8]
 8009414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	4623      	mov	r3, r4
 8009422:	f7f8 feaa 	bl	800217a <HAL_HCD_HC_Init>
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 f8bd 	bl	80095ac <USBH_Get_USB_Status>
 8009432:	4603      	mov	r3, r0
 8009434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009436:	7bbb      	ldrb	r3, [r7, #14]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	bd90      	pop	{r4, r7, pc}

08009440 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7f8 ff1a 	bl	8002298 <HAL_HCD_HC_Halt>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f89e 	bl	80095ac <USBH_Get_USB_Status>
 8009470:	4603      	mov	r3, r0
 8009472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009474:	7bbb      	ldrb	r3, [r7, #14]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800947e:	b590      	push	{r4, r7, lr}
 8009480:	b089      	sub	sp, #36	; 0x24
 8009482:	af04      	add	r7, sp, #16
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	461a      	mov	r2, r3
 800948c:	4603      	mov	r3, r0
 800948e:	70fb      	strb	r3, [r7, #3]
 8009490:	460b      	mov	r3, r1
 8009492:	70bb      	strb	r3, [r7, #2]
 8009494:	4613      	mov	r3, r2
 8009496:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80094a6:	787c      	ldrb	r4, [r7, #1]
 80094a8:	78ba      	ldrb	r2, [r7, #2]
 80094aa:	78f9      	ldrb	r1, [r7, #3]
 80094ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094b4:	9302      	str	r3, [sp, #8]
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	4623      	mov	r3, r4
 80094c2:	f7f8 ff0d 	bl	80022e0 <HAL_HCD_HC_SubmitRequest>
 80094c6:	4603      	mov	r3, r0
 80094c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 f86d 	bl	80095ac <USBH_Get_USB_Status>
 80094d2:	4603      	mov	r3, r0
 80094d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd90      	pop	{r4, r7, pc}

080094e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7f9 f9a1 	bl	800283e <HAL_HCD_HC_GetURBState>
 80094fc:	4603      	mov	r3, r0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009518:	2b01      	cmp	r3, #1
 800951a:	d103      	bne.n	8009524 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f870 	bl	8009604 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009524:	20c8      	movs	r0, #200	; 0xc8
 8009526:	f7f8 fadb 	bl	8001ae0 <HAL_Delay>
  return USBH_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
 8009540:	4613      	mov	r3, r2
 8009542:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800954a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800954c:	78fb      	ldrb	r3, [r7, #3]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	212c      	movs	r1, #44	; 0x2c
 8009552:	fb01 f303 	mul.w	r3, r1, r3
 8009556:	4413      	add	r3, r2
 8009558:	333b      	adds	r3, #59	; 0x3b
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d009      	beq.n	8009574 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	212c      	movs	r1, #44	; 0x2c
 8009566:	fb01 f303 	mul.w	r3, r1, r3
 800956a:	4413      	add	r3, r2
 800956c:	3354      	adds	r3, #84	; 0x54
 800956e:	78ba      	ldrb	r2, [r7, #2]
 8009570:	701a      	strb	r2, [r3, #0]
 8009572:	e008      	b.n	8009586 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	212c      	movs	r1, #44	; 0x2c
 800957a:	fb01 f303 	mul.w	r3, r1, r3
 800957e:	4413      	add	r3, r2
 8009580:	3355      	adds	r3, #85	; 0x55
 8009582:	78ba      	ldrb	r2, [r7, #2]
 8009584:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7f8 fa9f 	bl	8001ae0 <HAL_Delay>
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d817      	bhi.n	80095f0 <USBH_Get_USB_Status+0x44>
 80095c0:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <USBH_Get_USB_Status+0x1c>)
 80095c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c6:	bf00      	nop
 80095c8:	080095d9 	.word	0x080095d9
 80095cc:	080095df 	.word	0x080095df
 80095d0:	080095e5 	.word	0x080095e5
 80095d4:	080095eb 	.word	0x080095eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
    break;
 80095dc:	e00b      	b.n	80095f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80095de:	2302      	movs	r3, #2
 80095e0:	73fb      	strb	r3, [r7, #15]
    break;
 80095e2:	e008      	b.n	80095f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
    break;
 80095e8:	e005      	b.n	80095f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80095ea:	2302      	movs	r3, #2
 80095ec:	73fb      	strb	r3, [r7, #15]
    break;
 80095ee:	e002      	b.n	80095f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80095f0:	2302      	movs	r3, #2
 80095f2:	73fb      	strb	r3, [r7, #15]
    break;
 80095f4:	bf00      	nop
  }
  return usb_status;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
 800961c:	e001      	b.n	8009622 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800961e:	2301      	movs	r3, #1
 8009620:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	461a      	mov	r2, r3
 8009626:	2101      	movs	r1, #1
 8009628:	4803      	ldr	r0, [pc, #12]	; (8009638 <MX_DriverVbusFS+0x34>)
 800962a:	f7f8 fd2b 	bl	8002084 <HAL_GPIO_WritePin>
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	40020800 	.word	0x40020800

0800963c <malloc>:
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <malloc+0xc>)
 800963e:	4601      	mov	r1, r0
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	f000 b82b 	b.w	800969c <_malloc_r>
 8009646:	bf00      	nop
 8009648:	20000078 	.word	0x20000078

0800964c <free>:
 800964c:	4b02      	ldr	r3, [pc, #8]	; (8009658 <free+0xc>)
 800964e:	4601      	mov	r1, r0
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	f000 b8f3 	b.w	800983c <_free_r>
 8009656:	bf00      	nop
 8009658:	20000078 	.word	0x20000078

0800965c <sbrk_aligned>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	4e0e      	ldr	r6, [pc, #56]	; (8009698 <sbrk_aligned+0x3c>)
 8009660:	460c      	mov	r4, r1
 8009662:	6831      	ldr	r1, [r6, #0]
 8009664:	4605      	mov	r5, r0
 8009666:	b911      	cbnz	r1, 800966e <sbrk_aligned+0x12>
 8009668:	f000 f8ac 	bl	80097c4 <_sbrk_r>
 800966c:	6030      	str	r0, [r6, #0]
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 f8a7 	bl	80097c4 <_sbrk_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d00a      	beq.n	8009690 <sbrk_aligned+0x34>
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d007      	beq.n	8009694 <sbrk_aligned+0x38>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4628      	mov	r0, r5
 8009688:	f000 f89c 	bl	80097c4 <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d101      	bne.n	8009694 <sbrk_aligned+0x38>
 8009690:	f04f 34ff 	mov.w	r4, #4294967295
 8009694:	4620      	mov	r0, r4
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	200008c8 	.word	0x200008c8

0800969c <_malloc_r>:
 800969c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a0:	1ccd      	adds	r5, r1, #3
 80096a2:	f025 0503 	bic.w	r5, r5, #3
 80096a6:	3508      	adds	r5, #8
 80096a8:	2d0c      	cmp	r5, #12
 80096aa:	bf38      	it	cc
 80096ac:	250c      	movcc	r5, #12
 80096ae:	2d00      	cmp	r5, #0
 80096b0:	4607      	mov	r7, r0
 80096b2:	db01      	blt.n	80096b8 <_malloc_r+0x1c>
 80096b4:	42a9      	cmp	r1, r5
 80096b6:	d905      	bls.n	80096c4 <_malloc_r+0x28>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	2600      	movs	r6, #0
 80096be:	4630      	mov	r0, r6
 80096c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009798 <_malloc_r+0xfc>
 80096c8:	f000 f868 	bl	800979c <__malloc_lock>
 80096cc:	f8d8 3000 	ldr.w	r3, [r8]
 80096d0:	461c      	mov	r4, r3
 80096d2:	bb5c      	cbnz	r4, 800972c <_malloc_r+0x90>
 80096d4:	4629      	mov	r1, r5
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff ffc0 	bl	800965c <sbrk_aligned>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	4604      	mov	r4, r0
 80096e0:	d155      	bne.n	800978e <_malloc_r+0xf2>
 80096e2:	f8d8 4000 	ldr.w	r4, [r8]
 80096e6:	4626      	mov	r6, r4
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	d145      	bne.n	8009778 <_malloc_r+0xdc>
 80096ec:	2c00      	cmp	r4, #0
 80096ee:	d048      	beq.n	8009782 <_malloc_r+0xe6>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	4631      	mov	r1, r6
 80096f4:	4638      	mov	r0, r7
 80096f6:	eb04 0903 	add.w	r9, r4, r3
 80096fa:	f000 f863 	bl	80097c4 <_sbrk_r>
 80096fe:	4581      	cmp	r9, r0
 8009700:	d13f      	bne.n	8009782 <_malloc_r+0xe6>
 8009702:	6821      	ldr	r1, [r4, #0]
 8009704:	1a6d      	subs	r5, r5, r1
 8009706:	4629      	mov	r1, r5
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff ffa7 	bl	800965c <sbrk_aligned>
 800970e:	3001      	adds	r0, #1
 8009710:	d037      	beq.n	8009782 <_malloc_r+0xe6>
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	442b      	add	r3, r5
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	f8d8 3000 	ldr.w	r3, [r8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d038      	beq.n	8009792 <_malloc_r+0xf6>
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	42a2      	cmp	r2, r4
 8009724:	d12b      	bne.n	800977e <_malloc_r+0xe2>
 8009726:	2200      	movs	r2, #0
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	e00f      	b.n	800974c <_malloc_r+0xb0>
 800972c:	6822      	ldr	r2, [r4, #0]
 800972e:	1b52      	subs	r2, r2, r5
 8009730:	d41f      	bmi.n	8009772 <_malloc_r+0xd6>
 8009732:	2a0b      	cmp	r2, #11
 8009734:	d917      	bls.n	8009766 <_malloc_r+0xca>
 8009736:	1961      	adds	r1, r4, r5
 8009738:	42a3      	cmp	r3, r4
 800973a:	6025      	str	r5, [r4, #0]
 800973c:	bf18      	it	ne
 800973e:	6059      	strne	r1, [r3, #4]
 8009740:	6863      	ldr	r3, [r4, #4]
 8009742:	bf08      	it	eq
 8009744:	f8c8 1000 	streq.w	r1, [r8]
 8009748:	5162      	str	r2, [r4, r5]
 800974a:	604b      	str	r3, [r1, #4]
 800974c:	4638      	mov	r0, r7
 800974e:	f104 060b 	add.w	r6, r4, #11
 8009752:	f000 f829 	bl	80097a8 <__malloc_unlock>
 8009756:	f026 0607 	bic.w	r6, r6, #7
 800975a:	1d23      	adds	r3, r4, #4
 800975c:	1af2      	subs	r2, r6, r3
 800975e:	d0ae      	beq.n	80096be <_malloc_r+0x22>
 8009760:	1b9b      	subs	r3, r3, r6
 8009762:	50a3      	str	r3, [r4, r2]
 8009764:	e7ab      	b.n	80096be <_malloc_r+0x22>
 8009766:	42a3      	cmp	r3, r4
 8009768:	6862      	ldr	r2, [r4, #4]
 800976a:	d1dd      	bne.n	8009728 <_malloc_r+0x8c>
 800976c:	f8c8 2000 	str.w	r2, [r8]
 8009770:	e7ec      	b.n	800974c <_malloc_r+0xb0>
 8009772:	4623      	mov	r3, r4
 8009774:	6864      	ldr	r4, [r4, #4]
 8009776:	e7ac      	b.n	80096d2 <_malloc_r+0x36>
 8009778:	4634      	mov	r4, r6
 800977a:	6876      	ldr	r6, [r6, #4]
 800977c:	e7b4      	b.n	80096e8 <_malloc_r+0x4c>
 800977e:	4613      	mov	r3, r2
 8009780:	e7cc      	b.n	800971c <_malloc_r+0x80>
 8009782:	230c      	movs	r3, #12
 8009784:	603b      	str	r3, [r7, #0]
 8009786:	4638      	mov	r0, r7
 8009788:	f000 f80e 	bl	80097a8 <__malloc_unlock>
 800978c:	e797      	b.n	80096be <_malloc_r+0x22>
 800978e:	6025      	str	r5, [r4, #0]
 8009790:	e7dc      	b.n	800974c <_malloc_r+0xb0>
 8009792:	605b      	str	r3, [r3, #4]
 8009794:	deff      	udf	#255	; 0xff
 8009796:	bf00      	nop
 8009798:	200008c4 	.word	0x200008c4

0800979c <__malloc_lock>:
 800979c:	4801      	ldr	r0, [pc, #4]	; (80097a4 <__malloc_lock+0x8>)
 800979e:	f000 b84b 	b.w	8009838 <__retarget_lock_acquire_recursive>
 80097a2:	bf00      	nop
 80097a4:	20000a08 	.word	0x20000a08

080097a8 <__malloc_unlock>:
 80097a8:	4801      	ldr	r0, [pc, #4]	; (80097b0 <__malloc_unlock+0x8>)
 80097aa:	f000 b846 	b.w	800983a <__retarget_lock_release_recursive>
 80097ae:	bf00      	nop
 80097b0:	20000a08 	.word	0x20000a08

080097b4 <memset>:
 80097b4:	4402      	add	r2, r0
 80097b6:	4603      	mov	r3, r0
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d100      	bne.n	80097be <memset+0xa>
 80097bc:	4770      	bx	lr
 80097be:	f803 1b01 	strb.w	r1, [r3], #1
 80097c2:	e7f9      	b.n	80097b8 <memset+0x4>

080097c4 <_sbrk_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d06      	ldr	r5, [pc, #24]	; (80097e0 <_sbrk_r+0x1c>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	602b      	str	r3, [r5, #0]
 80097d0:	f7f8 f8a2 	bl	8001918 <_sbrk>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_sbrk_r+0x1a>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_sbrk_r+0x1a>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20000a04 	.word	0x20000a04

080097e4 <__errno>:
 80097e4:	4b01      	ldr	r3, [pc, #4]	; (80097ec <__errno+0x8>)
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20000078 	.word	0x20000078

080097f0 <__libc_init_array>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	4d0d      	ldr	r5, [pc, #52]	; (8009828 <__libc_init_array+0x38>)
 80097f4:	4c0d      	ldr	r4, [pc, #52]	; (800982c <__libc_init_array+0x3c>)
 80097f6:	1b64      	subs	r4, r4, r5
 80097f8:	10a4      	asrs	r4, r4, #2
 80097fa:	2600      	movs	r6, #0
 80097fc:	42a6      	cmp	r6, r4
 80097fe:	d109      	bne.n	8009814 <__libc_init_array+0x24>
 8009800:	4d0b      	ldr	r5, [pc, #44]	; (8009830 <__libc_init_array+0x40>)
 8009802:	4c0c      	ldr	r4, [pc, #48]	; (8009834 <__libc_init_array+0x44>)
 8009804:	f000 f866 	bl	80098d4 <_init>
 8009808:	1b64      	subs	r4, r4, r5
 800980a:	10a4      	asrs	r4, r4, #2
 800980c:	2600      	movs	r6, #0
 800980e:	42a6      	cmp	r6, r4
 8009810:	d105      	bne.n	800981e <__libc_init_array+0x2e>
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	f855 3b04 	ldr.w	r3, [r5], #4
 8009818:	4798      	blx	r3
 800981a:	3601      	adds	r6, #1
 800981c:	e7ee      	b.n	80097fc <__libc_init_array+0xc>
 800981e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009822:	4798      	blx	r3
 8009824:	3601      	adds	r6, #1
 8009826:	e7f2      	b.n	800980e <__libc_init_array+0x1e>
 8009828:	08009914 	.word	0x08009914
 800982c:	08009914 	.word	0x08009914
 8009830:	08009914 	.word	0x08009914
 8009834:	08009918 	.word	0x08009918

08009838 <__retarget_lock_acquire_recursive>:
 8009838:	4770      	bx	lr

0800983a <__retarget_lock_release_recursive>:
 800983a:	4770      	bx	lr

0800983c <_free_r>:
 800983c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800983e:	2900      	cmp	r1, #0
 8009840:	d044      	beq.n	80098cc <_free_r+0x90>
 8009842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009846:	9001      	str	r0, [sp, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f1a1 0404 	sub.w	r4, r1, #4
 800984e:	bfb8      	it	lt
 8009850:	18e4      	addlt	r4, r4, r3
 8009852:	f7ff ffa3 	bl	800979c <__malloc_lock>
 8009856:	4a1e      	ldr	r2, [pc, #120]	; (80098d0 <_free_r+0x94>)
 8009858:	9801      	ldr	r0, [sp, #4]
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	b933      	cbnz	r3, 800986c <_free_r+0x30>
 800985e:	6063      	str	r3, [r4, #4]
 8009860:	6014      	str	r4, [r2, #0]
 8009862:	b003      	add	sp, #12
 8009864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009868:	f7ff bf9e 	b.w	80097a8 <__malloc_unlock>
 800986c:	42a3      	cmp	r3, r4
 800986e:	d908      	bls.n	8009882 <_free_r+0x46>
 8009870:	6825      	ldr	r5, [r4, #0]
 8009872:	1961      	adds	r1, r4, r5
 8009874:	428b      	cmp	r3, r1
 8009876:	bf01      	itttt	eq
 8009878:	6819      	ldreq	r1, [r3, #0]
 800987a:	685b      	ldreq	r3, [r3, #4]
 800987c:	1949      	addeq	r1, r1, r5
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	e7ed      	b.n	800985e <_free_r+0x22>
 8009882:	461a      	mov	r2, r3
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	b10b      	cbz	r3, 800988c <_free_r+0x50>
 8009888:	42a3      	cmp	r3, r4
 800988a:	d9fa      	bls.n	8009882 <_free_r+0x46>
 800988c:	6811      	ldr	r1, [r2, #0]
 800988e:	1855      	adds	r5, r2, r1
 8009890:	42a5      	cmp	r5, r4
 8009892:	d10b      	bne.n	80098ac <_free_r+0x70>
 8009894:	6824      	ldr	r4, [r4, #0]
 8009896:	4421      	add	r1, r4
 8009898:	1854      	adds	r4, r2, r1
 800989a:	42a3      	cmp	r3, r4
 800989c:	6011      	str	r1, [r2, #0]
 800989e:	d1e0      	bne.n	8009862 <_free_r+0x26>
 80098a0:	681c      	ldr	r4, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	6053      	str	r3, [r2, #4]
 80098a6:	440c      	add	r4, r1
 80098a8:	6014      	str	r4, [r2, #0]
 80098aa:	e7da      	b.n	8009862 <_free_r+0x26>
 80098ac:	d902      	bls.n	80098b4 <_free_r+0x78>
 80098ae:	230c      	movs	r3, #12
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	e7d6      	b.n	8009862 <_free_r+0x26>
 80098b4:	6825      	ldr	r5, [r4, #0]
 80098b6:	1961      	adds	r1, r4, r5
 80098b8:	428b      	cmp	r3, r1
 80098ba:	bf04      	itt	eq
 80098bc:	6819      	ldreq	r1, [r3, #0]
 80098be:	685b      	ldreq	r3, [r3, #4]
 80098c0:	6063      	str	r3, [r4, #4]
 80098c2:	bf04      	itt	eq
 80098c4:	1949      	addeq	r1, r1, r5
 80098c6:	6021      	streq	r1, [r4, #0]
 80098c8:	6054      	str	r4, [r2, #4]
 80098ca:	e7ca      	b.n	8009862 <_free_r+0x26>
 80098cc:	b003      	add	sp, #12
 80098ce:	bd30      	pop	{r4, r5, pc}
 80098d0:	200008c4 	.word	0x200008c4

080098d4 <_init>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr

080098e0 <_fini>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	bf00      	nop
 80098e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e6:	bc08      	pop	{r3}
 80098e8:	469e      	mov	lr, r3
 80098ea:	4770      	bx	lr
